//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=TemplateProducer.EnvironmentVersion%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// [%=Producer.GetSignature()%]
[%
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();

var IdentityRole = TemplateProducer.IdentityRole;
var IdentityRoleClaim = TemplateProducer.IdentityRoleClaim;

Func<Method, string> CallMethod = method => 
{
    if(method == null)
        throw new System.ArgumentNullException("method");

    switch(method.MethodType)
    {
        case CodeFluent.Model.Code.MethodType.SetLoad:
        case CodeFluent.Model.Code.MethodType.SetBodySnippet:
        case CodeFluent.Model.Code.MethodType.SetSnippet:
        case CodeFluent.Model.Code.MethodType.Count:
        case CodeFluent.Model.Code.MethodType.Delete:
            return method.Entity.Set.ClrFullTypeName + "." + method.Name;

        default:
            return method.Entity.ClrFullTypeName + "." + method.Name;
    }
};

Action<bool, string> WriteIf = (condition, str) => 
{
    if(condition)
    {
        Writer.Write(str);
    }
};

Action<bool, string> WriteInterface = (condition, str) => 
{
    if(condition)
    {
        Writer.WriteLine(",");
        Writer.Write("        ");
        Writer.Write(str);
    }
};
%]
using System;
using System.Linq;

namespace [%=TemplateProducer.Namespace%]
{
    public partial class RoleStore :
        Microsoft.AspNet.Identity.IRoleStore<[%=IdentityRole.Entity.ClrFullTypeName%]>[% 
		WriteInterface(TemplateProducer.CanImplementRoleClaimStore, string.Format("Microsoft.AspNet.Identity.IRoleClaimStore<{0}>", IdentityRole.Entity.ClrFullTypeName));
		WriteInterface(TemplateProducer.CanImplementQueryableRoleStore, string.Format("Microsoft.AspNet.Identity.IQueryableRoleStore<{0}>", IdentityRole.Entity.ClrFullTypeName));
		%]
    {
        private bool _disposed = false;

        public virtual void Dispose()
        {
            _disposed = true;
        }

        protected virtual void ThrowIfDisposed()
        {
            if (_disposed)
            {
                throw new ObjectDisposedException(GetType().Name);
            }
        }

        public virtual System.Threading.Tasks.Task CreateAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }

            role.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task UpdateAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }

            role.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task DeleteAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }

            role.Delete();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetRoleIdAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }

            return System.Threading.Tasks.Task.FromResult(role.EntityKey);
        }

        public virtual System.Threading.Tasks.Task<string> GetRoleNameAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }

            return System.Threading.Tasks.Task.FromResult(role.[%=IdentityRole.NameProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task SetRoleNameAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }

            role.[%=IdentityRole.NameProperty.Name%] = roleName;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<Role> FindByIdAsync(string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            return System.Threading.Tasks.Task.FromResult([%=IdentityRole.Entity.ClrFullTypeName%].LoadByEntityKey(roleId));
        }

        public virtual System.Threading.Tasks.Task<Role> FindByNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName));
        }
[% if (TemplateProducer.CanImplementRoleClaimStore) { 
    Func<string, string> ToClaimArguments = (argumentName) => 
    {
        string result = null;
        result += argumentName + "." + IdentityRoleClaim.TypeProperty.Name;
        result += ", " + argumentName + "." + IdentityRoleClaim.ValueProperty.Name;
        if(IdentityRoleClaim.ValueTypeProperty != null)
        {
            result += ", " + argumentName + "." + IdentityRoleClaim.ValueTypeProperty.Name;
        }
        if(IdentityRoleClaim.IssuerProperty != null)
        {
            result += ", " + argumentName + "." + IdentityRoleClaim.IssuerProperty.Name;
        }
        if(IdentityRoleClaim.OriginalIssuerProperty != null)
        {
            result += ", " + argumentName + "." + IdentityRoleClaim.OriginalIssuerProperty.Name;
        }
        
        return result;
    };
%]
        protected virtual System.Security.Claims.Claim ToClaim([%=IdentityRoleClaim.Entity.ClrFullTypeName%] roleClaim)
        {
            if (roleClaim == null)
            {
                return null;
            }

            System.Security.Claims.Claim claim = new System.Security.Claims.Claim([%= ToClaimArguments("roleClaim") %]);
            return claim;
        }

        protected virtual [%=IdentityRoleClaim.Entity.ClrFullTypeName%] ToRoleClaim(System.Security.Claims.Claim claim)
        {
            if (claim == null)
            {
                return null;
            }

            [%=IdentityRoleClaim.Entity.ClrFullTypeName%] roleClaim = new [%=IdentityRoleClaim.Entity.ClrFullTypeName%]();
            roleClaim.[%=IdentityRoleClaim.TypeProperty.Name%] = claim.Type;
            roleClaim.[%=IdentityRoleClaim.ValueProperty.Name%] = claim.Value;
            [% if(IdentityRoleClaim.ValueTypeProperty != null) { %]roleClaim.[%=IdentityRoleClaim.ValueTypeProperty.Name%] = claim.ValueType;[% } %]
            [% if(IdentityRoleClaim.IssuerProperty != null) { %]roleClaim.[%=IdentityRoleClaim.IssuerProperty.Name%] = claim.Issuer;[% } %]
            [% if(IdentityRoleClaim.OriginalIssuerProperty != null) { %]roleClaim.[%=IdentityRoleClaim.OriginalIssuerProperty.Name%] = claim.OriginalIssuer;[% } %]            
            return roleClaim;
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>> GetClaimsAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }

            System.Collections.Generic.IList<System.Security.Claims.Claim> claims = new System.Collections.Generic.List<System.Security.Claims.Claim>();
            foreach (var roleClaim in role.[%=IdentityRole.ClaimsProperty.Name%])
            {
                System.Security.Claims.Claim claim = ToClaim(roleClaim);
                claims.Add(claim);
            }

            return System.Threading.Tasks.Task.FromResult(claims);
        }

        public virtual System.Threading.Tasks.Task AddClaimAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Security.Claims.Claim claim, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }
            if (claim == null)
            {
                throw new ArgumentNullException("claim");
            }

            [%=IdentityRoleClaim.Entity.ClrFullTypeName%] roleClaim = ToRoleClaim(claim);
            roleClaim.Role = role;
            roleClaim.Save();

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task RemoveClaimAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, System.Security.Claims.Claim claim, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new ArgumentNullException("role");
            }
            if (claim == null)
            {
                throw new ArgumentNullException("claim");
            }
            
            System.Collections.Generic.List<[%=IdentityRoleClaim.Entity.ClrFullTypeName%]> claims = role.[%=IdentityRole.ClaimsProperty.Name%].Where(uc => uc.Value == claim.Value && uc.Type == claim.Type && uc.ValueType == claim.ValueType).ToList();
            foreach (var c in claims)
            {
                c.Delete();
                role.[%=IdentityRole.ClaimsProperty.Name%].Remove(c);
            }

            role.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }
[% } %]
[% if (TemplateProducer.CanImplementQueryableRoleStore) { %]
        public virtual IQueryable<[%=IdentityRole.Entity.ClrFullTypeName%]> Roles
        {
            get { return [%=CallMethod(IdentityRole.LoadAllMethod)%]().AsQueryable(); }
        }
[% } %]
    }
}