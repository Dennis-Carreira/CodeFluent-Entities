//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=TemplateProducer.EnvironmentVersion%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// [%=Producer.GetSignature()%]
[%
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();

var IdentityUser = TemplateProducer.IdentityUser;
var IdentityClaim = TemplateProducer.IdentityClaim;
var IdentityLogin = TemplateProducer.IdentityLogin;
var IdentityRole = TemplateProducer.IdentityRole;

string userTypeName = IdentityUser.Entity.ClrFullTypeName;
string userKeyTypeName = IdentityUser.KeyTypeName;

string roleTypeName = IdentityRole != null ? IdentityRole.Entity.ClrFullTypeName : null; 
string roleKeyTypeName = IdentityRole != null ? IdentityRole.KeyTypeName : null; 

string loginTypeName = IdentityLogin != null ? IdentityLogin.Entity.ClrFullTypeName : null; 
string loginSetTypeName = IdentityLogin != null ? IdentityLogin.Entity.Set.ClrFullTypeName : null; 
string claimTypeName = IdentityClaim != null ? IdentityClaim.Entity.ClrFullTypeName : null; 
string claimSetTypeName = IdentityClaim != null ? IdentityClaim.Entity.Set.ClrFullTypeName : null; 

Func<Method, string> CallMethod = method => 
{
    if(method == null)
        throw new System.ArgumentNullException("method");

    switch(method.MethodType)
    {
        case CodeFluent.Model.Code.MethodType.SetLoad:
        case CodeFluent.Model.Code.MethodType.SetBodySnippet:
        case CodeFluent.Model.Code.MethodType.SetSnippet:
        case CodeFluent.Model.Code.MethodType.Count:
        case CodeFluent.Model.Code.MethodType.Delete:
            return method.Entity.Set.ClrFullTypeName + "." + method.Name;

        default:
            return method.Entity.ClrFullTypeName + "." + method.Name;        
    }

};
%]
namespace [%=TemplateProducer.Namespace%]
{
    public partial class UserStore : 
        Microsoft.AspNet.Identity.IUserStore<[%=userTypeName%]>,[% 

        if(TemplateProducer.CanImplementQueryableUserStore) { %]
        Microsoft.AspNet.Identity.IQueryableUserStore<[%=userTypeName%]>,[% } 

        if(TemplateProducer.CanImplementPasswordStore) { %]
        Microsoft.AspNet.Identity.IUserPasswordStore<[%=userTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementSecurityStampStore) { %]
        Microsoft.AspNet.Identity.IUserSecurityStampStore<[%=userTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementRoleStore) { %]
        Microsoft.AspNet.Identity.IUserRoleStore<[%=userTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementLoginStore) { %]
        Microsoft.AspNet.Identity.IUserLoginStore<[%=userTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementLockoutStore) { %]
        Microsoft.AspNet.Identity.IUserLockoutStore<[%=userTypeName%], string>,[% }
        
        if(TemplateProducer.CanImplementClaimsStore) { %]
        Microsoft.AspNet.Identity.IUserClaimStore<[%=userTypeName%]>,[% }
        
        if(TemplateProducer.CanImplementEmailStore) { %]
        Microsoft.AspNet.Identity.IUserEmailStore<[%=userTypeName%]>,[% }
        
        if(TemplateProducer.CanImplementPhoneNumberStore) { %]
        Microsoft.AspNet.Identity.IUserPhoneNumberStore<[%=userTypeName%]>,[% }
        
        if(TemplateProducer.CanImplementTwoFactorStore) { %]
        Microsoft.AspNet.Identity.IUserTwoFactorStore<[%=userTypeName%], string>[% }
        
        if (TemplateProducer.IdentityUser.MustImplementGenericInterface) { %],
        Microsoft.AspNet.Identity.IUserStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% 

        if(TemplateProducer.CanImplementQueryableUserStore) { %]
        Microsoft.AspNet.Identity.IQueryableUserStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% } 

        if(TemplateProducer.CanImplementPasswordStore) { %]
        Microsoft.AspNet.Identity.IUserPasswordStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementSecurityStampStore) { %]
        Microsoft.AspNet.Identity.IUserSecurityStampStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementRoleStore) { %]
        Microsoft.AspNet.Identity.IUserRoleStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementLoginStore) { %]
        Microsoft.AspNet.Identity.IUserLoginStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% } 
        
        if(TemplateProducer.CanImplementLockoutStore) { %]
        Microsoft.AspNet.Identity.IUserLockoutStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% }
        
        if(TemplateProducer.CanImplementClaimsStore) { %]
        Microsoft.AspNet.Identity.IUserClaimStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% }
        
        if(TemplateProducer.CanImplementEmailStore) { %]
        Microsoft.AspNet.Identity.IUserEmailStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% }
        
        if(TemplateProducer.CanImplementPhoneNumberStore) { %]
        Microsoft.AspNet.Identity.IUserPhoneNumberStore<[%=userTypeName%], [%=userKeyTypeName%]>,[% }
        
        if(TemplateProducer.CanImplementTwoFactorStore) { %]
        Microsoft.AspNet.Identity.IUserTwoFactorStore<[%=userTypeName%], [%=userKeyTypeName%]>[% } 
        } %]
    {
    
        public System.Threading.Tasks.Task CreateAsync([%=userTypeName%] user)
        {
            if (user == null) 
                throw new System.ArgumentNullException("user");
            [% if (IdentityUser.CreationDateProperty != null) { %]
			if(user.[%= IdentityUser.CreationDateProperty.Name %] == CodeFluent.Runtime.CodeFluentPersistence.DefaultDateTimeValue)
			{
				user.[%= IdentityUser.CreationDateProperty.Name %] = System.DateTime.UtcNow;
			}
			[% }%]
            return System.Threading.Tasks.Task.FromResult(user.Save());
        }

        public System.Threading.Tasks.Task UpdateAsync([%=userTypeName%] user)
        {
            if (user == null) 
                throw new System.ArgumentNullException("user");

            return System.Threading.Tasks.Task.FromResult(user.Save());
        }

        public System.Threading.Tasks.Task DeleteAsync([%=userTypeName%] user)
        {
            if (user == null) 
            throw new System.ArgumentNullException("user");

            return System.Threading.Tasks.Task.FromResult(user.Delete());
        }

        public System.Threading.Tasks.Task<[%=userTypeName%]> FindByIdAsync(string userId)
        {
            return System.Threading.Tasks.Task.FromResult([%=TemplateProducer.IdentityUser.Entity.ClrFullTypeName%].LoadByEntityKey(userId));
        }
        [% if(TemplateProducer.IdentityUser.MustImplementGenericInterface) { %]
        public System.Threading.Tasks.Task<[%=userTypeName%]> FindByIdAsync([%=userKeyTypeName%] userId)
        {
            return System.Threading.Tasks.Task.FromResult([%=TemplateProducer.IdentityUser.Entity.ClrFullTypeName%].[%=TemplateProducer.IdentityUser.LoadByKeyMethodName%](userId));
        }
        [% } %]
        public System.Threading.Tasks.Task<[%=userTypeName%]> FindByNameAsync(string userName)
        {
            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUser.LoadByUserNameMethod)%](userName));
        }

[% if(TemplateProducer.CanImplementPasswordStore) { %]

        public System.Threading.Tasks.Task SetPasswordHashAsync([%=userTypeName%] user, string passwordHash)
        {
            user.[%=IdentityUser.PasswordProperty.Name%] = passwordHash;
            [% if(IdentityUser.LastPasswordChangeDateProperty != null) { 
            %]user.[%=IdentityUser.LastPasswordChangeDateProperty.Name%] = System.DateTime.UtcNow;[% 
            } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<string> GetPasswordHashAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PasswordProperty.Name%]);
        }

        public System.Threading.Tasks.Task<bool> HasPasswordAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PasswordProperty.Name%] != null);
        }

[% } if(TemplateProducer.CanImplementSecurityStampStore) { %]

        public System.Threading.Tasks.Task SetSecurityStampAsync([%=userTypeName%] user, string stamp)
        {
            [% if(IdentityUser.LastProfileUpdateDateProperty != null) { 
            %]user.[%=IdentityUser.LastProfileUpdateDateProperty.Name%] = System.DateTime.UtcNow;[% 
            } %]
            user.[%=IdentityUser.SecurityStampProperty.Name%] = stamp;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<string> GetSecurityStampAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.SecurityStampProperty.Name%]);
        }
        
[% } if(TemplateProducer.CanImplementLockoutStore) { %]

        public System.Threading.Tasks.Task<System.DateTimeOffset> GetLockoutEndDateAsync([%=userTypeName%] user)
        {
            [% if(IdentityUser.LockoutEndDateProperty.IsModelNullable) { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.LockoutEndDateProperty.Name%].HasValue ? new System.DateTimeOffset(System.DateTime.SpecifyKind(user.[%=IdentityUser.LockoutEndDateProperty.Name%].Value, System.DateTimeKind.Utc)) : new System.DateTimeOffset());
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult(new System.DateTimeOffset(System.DateTime.SpecifyKind(user.[%=IdentityUser.LockoutEndDateProperty.Name%], System.DateTimeKind.Utc)));
            [% } %]
        }

        public System.Threading.Tasks.Task SetLockoutEndDateAsync([%=userTypeName%] user, System.DateTimeOffset lockoutEnd)
        {
            if (lockoutEnd == System.DateTimeOffset.MinValue)
            {
                [% if(IdentityUser.LockoutEndDateProperty.IsModelNullable) { %]
                user.[%=IdentityUser.LockoutEndDateProperty.Name%] = null;
                [% } else { %]
                user.[%=IdentityUser.LockoutEndDateProperty.Name%] = System.DateTime.MinValue;
                [% } %]
                
            }
            else
            {
                user.[%=IdentityUser.LockoutEndDateProperty.Name%] = lockoutEnd.UtcDateTime;
            }

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<int> IncrementAccessFailedCountAsync([%=userTypeName%] user)
        {
            [% if(IdentityUser.FailedPasswordAttemptWindowStartProperty != null) { %]
            if(user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%] <= 0)
            {
                user.[%=IdentityUser.FailedPasswordAttemptWindowStartProperty.Name%] = System.DateTime.UtcNow;
            }
            [% } %]

            return System.Threading.Tasks.Task.FromResult(++user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%]);
        }

        public System.Threading.Tasks.Task ResetAccessFailedCountAsync([%=userTypeName%] user)
        {
            user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%] = 0;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<int> GetAccessFailedCountAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%]);
        }

        public System.Threading.Tasks.Task<bool> GetLockoutEnabledAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.LockoutEnabledProperty.Name%]);
        }

        public System.Threading.Tasks.Task SetLockoutEnabledAsync([%=userTypeName%] user, bool enabled)
        {
            user.[%=IdentityUser.LockoutEnabledProperty.Name%] = true;
            return System.Threading.Tasks.Task.FromResult(0);
        }

[% } if(TemplateProducer.CanImplementEmailStore) { %]

        public System.Threading.Tasks.Task SetEmailAsync([%=userTypeName%] user, string email)
        {
            user.[%=IdentityUser.EmailProperty.Name%] = email;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<string> GetEmailAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.EmailProperty.Name%]);
        }

        public System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync([%=userTypeName%] user)
        {
            [% if(IdentityUser.EmailConfirmedProperty != null) { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.EmailConfirmedProperty.Name%]);
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult(true);
            [% } %]
        }

        public System.Threading.Tasks.Task SetEmailConfirmedAsync([%=userTypeName%] user, bool confirmed)
        {
            [% if(IdentityUser.EmailConfirmedProperty != null) { %]
            user.[%=IdentityUser.EmailConfirmedProperty.Name%] = confirmed;
            [% } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<[%=userTypeName%]> FindByEmailAsync(string email)
        {
            [% if(IdentityUser.LoadByEmailMethod == null) { %]
            throw new System.InvalidOperationException();
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUser.LoadByEmailMethod)%](email));
            [% } %]
        }

[% } if(TemplateProducer.CanImplementPhoneNumberStore) { %]

        public System.Threading.Tasks.Task SetPhoneNumberAsync([%=userTypeName%] user, string phoneNumber)
        {
            user.[%=IdentityUser.PhoneNumberProperty.Name%] = phoneNumber;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<string> GetPhoneNumberAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PhoneNumberProperty.Name%]);
        }

        public System.Threading.Tasks.Task<bool> GetPhoneNumberConfirmedAsync([%=userTypeName%] user)
        {
            [% if(IdentityUser.PhoneNumberConfirmedProperty != null) { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PhoneNumberConfirmedProperty.Name%]);
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult(true);
            [% } %]
        }

        public System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync([%=userTypeName%] user, bool confirmed)
        {
            [% if(IdentityUser.PhoneNumberConfirmedProperty != null) { %]
            user.[%=IdentityUser.PhoneNumberConfirmedProperty.Name%] = confirmed;
            [% } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }

[% } if(TemplateProducer.CanImplementTwoFactorStore) { %]

        public System.Threading.Tasks.Task SetTwoFactorEnabledAsync([%=userTypeName%] user, bool enabled)
        {
            user.[%=IdentityUser.TwoFactorEnabledProperty.Name%] = enabled;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<bool> GetTwoFactorEnabledAsync([%=userTypeName%] user)
        {
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.TwoFactorEnabledProperty.Name%]);
        }


[% } if(TemplateProducer.CanImplementRoleStore) { %]

        public System.Threading.Tasks.Task AddToRoleAsync([%=userTypeName%] user, string roleName)
        {
            [%=roleTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
                throw new System.ArgumentException(string.Format("role '{0}' not found", roleName), "roleName");

            role.[%=IdentityRole.UsersProperty.Name%].Add(user);
            role.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task RemoveFromRoleAsync([%=userTypeName%] user, string roleName)
        {
            [%=roleTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
                throw new System.ArgumentException(string.Format("role '{0}' not found", roleName), "roleName");

            if (role.[%=IdentityRole.UsersProperty.Name%].Remove(user))
            {
                role.Save();
            }

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> GetRolesAsync([%=userTypeName%] user)
        {
            System.Collections.Generic.IList<string> result = new System.Collections.Generic.List<string>();
            foreach (Microsoft.AspNet.Identity.IRole role in user.[%=IdentityUser.RolesProperty.Name%])
            {
                result.Add(role.Name);
            }

            return System.Threading.Tasks.Task.FromResult(result);
        }

        public System.Threading.Tasks.Task<bool> IsInRoleAsync([%=userTypeName%] user, string roleName)
        {
            [%=roleTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
                throw new System.ArgumentException(string.Format("role '{0}' not found", roleName), "roleName");

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.RolesProperty.Name%].Contains(role));
        }

[% } if(TemplateProducer.CanImplementLoginStore) { %]

        public System.Threading.Tasks.Task AddLoginAsync([%=userTypeName%] user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo)
        {
            [%=loginTypeName%] login = new [%=loginTypeName%]();
            login.[%=IdentityLogin.UserProperty.Name%] = user;
            login.[%=IdentityLogin.ProviderKeyProperty.Name%] = userLoginInfo.ProviderKey;
            [% if(IdentityLogin.ProviderNameProperty != null) { %]
            login.[%=IdentityLogin.ProviderNameProperty.Name%] = userLoginInfo.LoginProvider;
            [% } %]
            login.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task RemoveLoginAsync([%=userTypeName%] user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo)
        {
            [% if(IdentityLogin.DeleteByUserAndProviderKeyMethod != null) { %]
            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityLogin.DeleteByUserAndProviderKeyMethod)%](user, userLoginInfo.ProviderKey));
            [% } else { %]
            throw new System.InvalidOperationException();
            [% } %]
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo>> GetLoginsAsync([%=userTypeName%] user)
        {
            System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo> result = new System.Collections.Generic.List<Microsoft.AspNet.Identity.UserLoginInfo>();
            [%=loginSetTypeName%] userLogins = user.[%=IdentityUser.LoginsProperty.Name%];
            foreach([%=loginTypeName%] userLogin in userLogins)
            {
                [% if(IdentityLogin.ProviderNameProperty == null) { %]
                Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo = new Microsoft.AspNet.Identity.UserLoginInfo("Not provided", userLogin.[%=IdentityLogin.ProviderKeyProperty.Name%]);
                [% } else { %]
                Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo = new Microsoft.AspNet.Identity.UserLoginInfo(userLogin.[%=IdentityLogin.ProviderNameProperty.Name%], userLogin.[%=IdentityLogin.ProviderKeyProperty.Name%]);
                [% } %]
                result.Add(userLoginInfo);
            }
            
            return System.Threading.Tasks.Task.FromResult(result);
        }

        public System.Threading.Tasks.Task<[%=userTypeName%]> FindAsync(Microsoft.AspNet.Identity.UserLoginInfo login)
        {
            [% if(IdentityUser.LoadByProviderKeyMethod == null) { %]
            throw new System.InvalidOperationException();
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUser.LoadByProviderKeyMethod)%](login.ProviderKey));
            [% } %]
            
        }

[% } if(TemplateProducer.CanImplementClaimsStore) { 
    Func<string, string> ToClaimArguments = (argumentName) => 
    {
        string result = null;
        result += argumentName + "." + IdentityClaim.TypeProperty.Name;
        result += ", " + argumentName + "." + IdentityClaim.ValueProperty.Name;
        result += ", " + (IdentityClaim.ValueTypeProperty != null ? argumentName + "." + IdentityClaim.ValueTypeProperty.Name : "null");
        result += ", " + (IdentityClaim.IssuerProperty != null ? argumentName + "." + IdentityClaim.IssuerProperty.Name : "null");
        result += ", " + (IdentityClaim.OriginalIssuerProperty != null ? argumentName + "." + IdentityClaim.OriginalIssuerProperty.Name : "null");
        
        return result;
    };

    Func<string> CallDeleteClaimMethod = () =>
    {
        if (IdentityClaim.DeleteClaimMethod == null)
            return "throw new System.InvalidOperationException()";

        string result = CallMethod(IdentityClaim.DeleteClaimMethod) + "(";
        bool firstParameter = true;
        foreach (var parameter in IdentityClaim.DeleteClaimMethod.Parameters)
        {
            string parameterText = null;
            if (parameter.ProjectProperty == IdentityClaim.UserProperty)
            {
                parameterText = "user";
            }
            else if (parameter.ProjectProperty == IdentityClaim.TypeProperty)
            {
                parameterText = "claim." + IdentityClaim.TypeProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityClaim.ValueProperty)
            {
                parameterText = "claim." + IdentityClaim.ValueProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityClaim.ValueTypeProperty)
            {
                parameterText = "claim." + IdentityClaim.ValueTypeProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityClaim.IssuerProperty)
            {
                parameterText = "claim." + IdentityClaim.IssuerProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityClaim.OriginalIssuerProperty)
            {
                parameterText = "claim." + IdentityClaim.OriginalIssuerProperty.Name;
            }
            else
            {
                continue;
            }

            if (!firstParameter)
            {
                parameterText = ", " + parameterText;
            }
            else
            {
                firstParameter = false;
            }

            result += parameterText;
        }

        return result + ")";
    };
%]

        public System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>> GetClaimsAsync([%=userTypeName%] user)
        {
            System.Collections.Generic.IList<System.Security.Claims.Claim> result = new System.Collections.Generic.List<System.Security.Claims.Claim>();
            [%=claimSetTypeName%] userClaims = user.[%=IdentityUser.ClaimsProperty.Name%];
            foreach([%=claimTypeName%] userClaim in userClaims)
            {
                System.Security.Claims.Claim claim = new System.Security.Claims.Claim([%=ToClaimArguments("userClaim")%]);
                result.Add(claim);
            }
            
            return System.Threading.Tasks.Task.FromResult(result);
        }

        public System.Threading.Tasks.Task AddClaimAsync([%=userTypeName%] user, System.Security.Claims.Claim claim)
        {
            [%=claimTypeName%] userClaim = new [%=claimTypeName%]();
            userClaim.[%=IdentityClaim.UserProperty.Name%] = user;
            userClaim.[%=IdentityClaim.TypeProperty.Name%] = claim.Type;
            userClaim.[%=IdentityClaim.ValueProperty.Name%] = claim.Value;
            [%if (IdentityClaim.IssuerProperty != null) { %]
            userClaim.[%=IdentityClaim.IssuerProperty.Name%] = claim.Issuer;
            [% } if (IdentityClaim.OriginalIssuerProperty != null) { %]
            userClaim.[%=IdentityClaim.OriginalIssuerProperty.Name%] = claim.OriginalIssuer;
            [% } if (IdentityClaim.ValueTypeProperty != null) { %]
            userClaim.[%=IdentityClaim.ValueTypeProperty.Name%] = claim.ValueType;
            [% } %]
            
            userClaim.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public System.Threading.Tasks.Task RemoveClaimAsync([%=userTypeName%] user, System.Security.Claims.Claim claim)
        {
            [%=CallDeleteClaimMethod()%];
            return System.Threading.Tasks.Task.FromResult(0);
        }
[% } %]

		[% if (TemplateProducer.CanImplementQueryableUserStore) { %]
		public System.Linq.IQueryable<[%=userTypeName%]> Users 
		{ 
			get
			{
				return System.Linq.Queryable.AsQueryable([%=CallMethod(IdentityUser.LoadAllMethod)%]());
			}
		}
		[% } %]
		
        public virtual void Dispose()
        {
        }
    }
}