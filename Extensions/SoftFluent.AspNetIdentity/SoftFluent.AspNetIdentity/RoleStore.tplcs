//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=TemplateProducer.EnvironmentVersion%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// [%=Producer.GetSignature()%]
[%
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();

var IdentityRole = TemplateProducer.IdentityRole;

Func<Method, string> CallMethod = method => 
{
    if(method == null)
        throw new System.ArgumentNullException("method");

    switch(method.MethodType)
    {
        case CodeFluent.Model.Code.MethodType.SetLoad:
        case CodeFluent.Model.Code.MethodType.SetBodySnippet:
        case CodeFluent.Model.Code.MethodType.SetSnippet:
        case CodeFluent.Model.Code.MethodType.Count:
        case CodeFluent.Model.Code.MethodType.Delete:
            return method.Entity.Set.ClrFullTypeName + "." + method.Name;

        default:
            return method.Entity.ClrFullTypeName + "." + method.Name;
    }

};

Action<bool, string> WriteIf = (condition, str) => 
{
    if(condition)
    {
        Writer.Write(str);
    }
};

Action<bool, string> WriteInterface = (condition, str) => 
{
    if(condition)
    {
        Writer.WriteLine(",");
        Writer.Write("        ");
        Writer.Write(str);
    }
};
%]
using System;
using System.Linq;
using System.Threading;

namespace [%=TemplateProducer.Namespace%]
{
    public partial class RoleStore :
        Microsoft.AspNet.Identity.IRoleStore<[%=IdentityRole.Entity.ClrFullTypeName%]>[% 		

		WriteInterface(TemplateProducer.CanImplementQueryableRoleStore, string.Format("Microsoft.AspNet.Identity.IQueryableRoleStore<{0}>", IdentityRole.Entity.ClrFullTypeName));

		if(TemplateProducer.CanImplementGenericInterfaces)
		{
			WriteInterface(TemplateProducer.CanImplementGenericInterfaces, string.Format("Microsoft.AspNet.Identity.IRoleStore<{0}, {1}>", IdentityRole.Entity.ClrFullTypeName, IdentityRole.KeyTypeName));
			WriteInterface(TemplateProducer.CanImplementQueryableRoleStore, string.Format("Microsoft.AspNet.Identity.IQueryableRoleStore<{0}, {1}>", IdentityRole.Entity.ClrFullTypeName, IdentityRole.KeyTypeName));
		}
		%]
    {
        private bool _disposed = false;

        public virtual System.Threading.Tasks.Task CreateAsync([%=IdentityRole.Entity.ClrFullTypeName%] role)
        {
            return CreateAsync(role, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task CreateAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new System.ArgumentNullException("role");
            }

            return System.Threading.Tasks.Task.FromResult(role.Save());
        }

        public virtual System.Threading.Tasks.Task UpdateAsync([%=IdentityRole.Entity.ClrFullTypeName%] role)
        {
            return UpdateAsync(role, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task UpdateAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new System.ArgumentNullException("role");
            }

            return System.Threading.Tasks.Task.FromResult(role.Save());
        }

        public virtual System.Threading.Tasks.Task DeleteAsync([%=IdentityRole.Entity.ClrFullTypeName%] role)
        {
            return DeleteAsync(role, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task DeleteAsync([%=IdentityRole.Entity.ClrFullTypeName%] role, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (role == null)
            {
                throw new System.ArgumentNullException("role");
            }

            return System.Threading.Tasks.Task.FromResult(role.Delete());
        }

        public virtual System.Threading.Tasks.Task<[%=IdentityRole.Entity.ClrFullTypeName%]> FindByIdAsync(string roleId)
        {
            return FindByIdAsync(roleId, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=IdentityRole.Entity.ClrFullTypeName%]> FindByIdAsync(string roleId, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            return System.Threading.Tasks.Task.FromResult([%=IdentityRole.Entity.ClrFullTypeName%].LoadByEntityKey(roleId));
        }
        [% if (TemplateProducer.CanImplementGenericInterfaces) { %]
        public virtual System.Threading.Tasks.Task<[%=IdentityRole.Entity.ClrFullTypeName%]> FindByIdAsync([%=IdentityRole.KeyTypeName%] roleId)
        {
            return FindByIdAsync(roleId, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=IdentityRole.Entity.ClrFullTypeName%]> FindByIdAsync([%=IdentityRole.KeyTypeName%] roleId, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            return System.Threading.Tasks.Task.FromResult([%=IdentityRole.Entity.ClrFullTypeName%].[%=IdentityRole.LoadByKeyMethodName%](roleId));
        }
        [% } %]
        public virtual System.Threading.Tasks.Task<[%=IdentityRole.Entity.ClrFullTypeName%]> FindByNameAsync(string roleName)
        {
            return FindByNameAsync(roleName, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=IdentityRole.Entity.ClrFullTypeName%]> FindByNameAsync(string roleName, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName));
        }       
        [% if (TemplateProducer.CanImplementQueryableRoleStore) { %]
        public virtual System.Linq.IQueryable<[%=IdentityRole.Entity.ClrFullTypeName%]> Roles 
        { 
            get
            {
                return System.Linq.Queryable.AsQueryable([%=CallMethod(IdentityRole.LoadAllMethod)%]());
            }
        }
        [% } %]
        public virtual void Dispose()
        {
            _disposed = true;
        }
                
        protected virtual void ThrowIfDisposed()
        {
            if (_disposed)
            {
                throw new ObjectDisposedException(GetType().Name);
            }
        }
    }
}