//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=TemplateProducer.EnvironmentVersion%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// [%=Producer.GetSignature()%]

namespace [%=TemplateProducer.Namespace%]
{
	public partial class RoleStore : [% if (TemplateProducer.CanImplementQueryableRoleStore) { %]Microsoft.AspNet.Identity.IQueryableRoleStore<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%]>, [% } 
										if (TemplateProducer.CanImplementQueryableRoleStore && TemplateProducer.IdentityRole.MustImplementGenericInterface) { %]Microsoft.AspNet.Identity.IQueryableRoleStore<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%], [%=TemplateProducer.IdentityRole.KeyTypeName%]>, [% } 
										if (TemplateProducer.IdentityRole.MustImplementGenericInterface) { %]Microsoft.AspNet.Identity.IRoleStore<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%], [%=TemplateProducer.IdentityRole.KeyTypeName%]>, [% } 
                                        %]Microsoft.AspNet.Identity.IRoleStore<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%]>
	{
        public System.Threading.Tasks.Task CreateAsync([%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%] role)
        {
			if(role == null)
				throw new System.ArgumentNullException("role");

            return System.Threading.Tasks.Task.FromResult(role.Save());
        }

        public System.Threading.Tasks.Task UpdateAsync([%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%] role)
        {
			if(role == null)
				throw new System.ArgumentNullException("role");

            return System.Threading.Tasks.Task.FromResult(role.Save());
        }

        public System.Threading.Tasks.Task DeleteAsync([%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%] role)
        {
			if(role == null)
				throw new System.ArgumentNullException("role");

            return System.Threading.Tasks.Task.FromResult(role.Delete());
        }

        public System.Threading.Tasks.Task<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%]> FindByIdAsync(string roleId)
        {
            return System.Threading.Tasks.Task.FromResult([%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%].LoadByEntityKey(roleId));
        }
		[% if (TemplateProducer.IdentityRole.MustImplementGenericInterface) { %]
        public System.Threading.Tasks.Task<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%]> FindByIdAsync([%=TemplateProducer.IdentityRole.KeyTypeName%] roleId)
        {
            return System.Threading.Tasks.Task.FromResult([%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%].[%=TemplateProducer.IdentityRole.LoadByKeyMethodName%](roleId));
        }
		[% } %]
        public System.Threading.Tasks.Task<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%]> FindByNameAsync(string roleName)
        {
            return System.Threading.Tasks.Task.FromResult([%=TemplateProducer.IdentityRole.LoadByNameMethod.Entity.ClrFullTypeName%].[%=TemplateProducer.IdentityRole.LoadByNameMethod.Name%](roleName));
        }

		[% if (TemplateProducer.CanImplementQueryableRoleStore) { %]
		public System.Linq.IQueryable<[%=TemplateProducer.IdentityRole.Entity.ClrFullTypeName%]> Roles 
		{ 
			get
			{
				return System.Linq.Queryable.AsQueryable([%=TemplateProducer.IdentityRole.LoadAllMethod.Entity.Set.ClrFullTypeName%].[%=TemplateProducer.IdentityRole.LoadAllMethod.Name%]());
			}
		}
		[% } %]
		
        public void Dispose()
        {
        }
	}
}