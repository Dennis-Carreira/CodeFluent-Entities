//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=TemplateProducer.EnvironmentVersion%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// [%=Producer.GetSignature()%]
[%
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();

var IdentityUser = TemplateProducer.IdentityUser;
var IdentityClaim = TemplateProducer.IdentityClaim;
var IdentityLogin = TemplateProducer.IdentityLogin;
var IdentityRole = TemplateProducer.IdentityRole;

string userTypeName = IdentityUser.Entity.ClrFullTypeName;

string roleTypeName = IdentityRole != null ? IdentityRole.Entity.ClrFullTypeName : null; 
string roleKeyTypeName = IdentityRole != null ? IdentityRole.KeyTypeName : null; 

string loginTypeName = IdentityLogin != null ? IdentityLogin.Entity.ClrFullTypeName : null; 
string loginSetTypeName = IdentityLogin != null ? IdentityLogin.Entity.Set.ClrFullTypeName : null; 
string claimTypeName = IdentityClaim != null ? IdentityClaim.Entity.ClrFullTypeName : null; 
string claimSetTypeName = IdentityClaim != null ? IdentityClaim.Entity.Set.ClrFullTypeName : null; 

Func<Method, string> CallMethod = method => 
{
    if(method == null)
        throw new System.ArgumentNullException("method");

    switch(method.MethodType)
    {
        case CodeFluent.Model.Code.MethodType.SetLoad:
        case CodeFluent.Model.Code.MethodType.SetBodySnippet:
        case CodeFluent.Model.Code.MethodType.SetSnippet:
        case CodeFluent.Model.Code.MethodType.Count:
        case CodeFluent.Model.Code.MethodType.Delete:
            return method.Entity.Set.ClrFullTypeName + "." + method.Name;

        default:
            return method.Entity.ClrFullTypeName + "." + method.Name;        
    }
};

Action<bool, string> WriteIf = (condition, str) => 
{
    if(condition)
    {
        Writer.Write(str);
    }
};

Action<bool, string> WriteLineIf = (condition, str) => 
{
    if(condition)
    {
        Writer.WriteLine(str);
    }
};

Action<bool, string> WriteInterface = (condition, str) => 
{
    if(condition)
    {
        Writer.WriteLine(",");
        Writer.Write("        ");
        Writer.Write(str);
    }
};
%]
using System;
using System.Linq;

namespace [%=TemplateProducer.Namespace%]
{
    public partial class UserStore : 
        Microsoft.AspNet.Identity.IUserStore<[%=userTypeName%]>[%
        WriteInterface(TemplateProducer.CanImplementClaimsStore, string.Format("Microsoft.AspNet.Identity.IUserClaimStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementLoginStore, string.Format("Microsoft.AspNet.Identity.IUserLoginStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementRoleStore, string.Format("Microsoft.AspNet.Identity.IUserRoleStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementPasswordStore, string.Format("Microsoft.AspNet.Identity.IUserPasswordStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementSecurityStampStore, string.Format("Microsoft.AspNet.Identity.IUserSecurityStampStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementEmailStore, string.Format("Microsoft.AspNet.Identity.IUserEmailStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementLockoutStore, string.Format("Microsoft.AspNet.Identity.IUserLockoutStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementPhoneNumberStore, string.Format("Microsoft.AspNet.Identity.IUserPhoneNumberStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementQueryableUserStore, string.Format("Microsoft.AspNet.Identity.IQueryableUserStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementTwoFactorStore, string.Format("Microsoft.AspNet.Identity.IUserTwoFactorStore<{0}>", userTypeName));
        %]
    {
        private bool _disposed = false;

        public virtual void Dispose()
        {
            _disposed = true;
        }
                
        protected virtual void ThrowIfDisposed()
        {
            if (_disposed)
            {
                throw new ObjectDisposedException(GetType().Name);
            }
        }

        public virtual System.Threading.Tasks.Task<string> GetUserIdAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.EntityKey);
        }


        public virtual System.Threading.Tasks.Task<string> GetUserNameAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.UserNameProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task SetUserNameAsync([%=userTypeName%] user, string userName, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.UserNameProperty.Name%] = userName;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetNormalizedUserNameAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.NormalizedUserNameProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task SetNormalizedUserNameAsync([%=userTypeName%] user, string normalizedName, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.NormalizedUserNameProperty.Name%] = normalizedName;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task CreateAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task UpdateAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task DeleteAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.Delete();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByIdAsync(string userId, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            [%=userTypeName%] user = [%=IdentityUser.Entity.Name%].LoadByEntityKey(userId);
            return System.Threading.Tasks.Task.FromResult(user);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByNameAsync(string normalizedUserName, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            [%=userTypeName%] user = [%=CallMethod(IdentityUser.LoadByUserNameMethod)%](normalizedUserName);
            return System.Threading.Tasks.Task.FromResult(user);
        }
[% if(TemplateProducer.CanImplementTwoFactorStore) { %]
        public virtual System.Threading.Tasks.Task SetTwoFactorEnabledAsync(User user, bool enabled, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.TwoFactorEnabledProperty.Name%] = enabled;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<bool> GetTwoFactorEnabledAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.TwoFactorEnabledProperty.Name%]);
        }
[% } %]
[% if(TemplateProducer.CanImplementPhoneNumberStore) { %]
        public virtual System.Threading.Tasks.Task SetPhoneNumberAsync([%=userTypeName%] user, string phoneNumber, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.PhoneNumberProperty.Name%] = phoneNumber;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetPhoneNumberAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PhoneNumberProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> GetPhoneNumberConfirmedAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult([%if(IdentityUser.PhoneNumberConfirmedProperty != null) { %]user.[%=IdentityUser.PhoneNumberConfirmedProperty.Name%][% } else { %]true[% } %]);
        }

        public virtual System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync([%=userTypeName%] user, bool confirmed, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            [% if(IdentityUser.PhoneNumberConfirmedProperty != null) { %]
            user.[%=IdentityUser.PhoneNumberConfirmedProperty.Name%] = confirmed;[% } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }
[% } %]
[% if(TemplateProducer.CanImplementSecurityStampStore) { %]
        public virtual System.Threading.Tasks.Task SetSecurityStampAsync([%=userTypeName%] user, string stamp, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.SecurityStampProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<string> GetSecurityStampAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.SecurityStampProperty.Name%]);
        }
[% } %]
[% if(TemplateProducer.CanImplementPasswordStore) { %]
        public virtual System.Threading.Tasks.Task SetPasswordHashAsync([%=userTypeName%] user, string passwordHash, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.PasswordProperty.Name%] = passwordHash;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetPasswordHashAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PasswordProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> HasPasswordAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PasswordProperty.Name%] != null);
        }
[% } %]
[% if(TemplateProducer.CanImplementEmailStore) { %]
        public virtual System.Threading.Tasks.Task SetEmailAsync([%=userTypeName%] user, string email, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.EmailProperty.Name%] = email;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetEmailAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.EmailProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult([%if(IdentityUser.EmailConfirmedProperty != null) { %]user.[%=IdentityUser.EmailConfirmedProperty.Name%][% } else { %]true[% } %]);
        }

        public virtual System.Threading.Tasks.Task SetEmailConfirmedAsync([%=userTypeName%] user, bool confirmed, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [% if(IdentityUser.EmailConfirmedProperty != null) { %]
            user.EmailConfirmed = confirmed;[% } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByEmailAsync(string email, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();

            [%=userTypeName%] user = [%=CallMethod(IdentityUser.LoadByEmailMethod)%](email);
            return System.Threading.Tasks.Task.FromResult(user);
        }
[% } %]
[% if(TemplateProducer.CanImplementLockoutStore) { %]
        public virtual System.Threading.Tasks.Task<DateTimeOffset?> GetLockoutEndDateAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [% if(IdentityUser.LockoutEndDateProperty.IsModelNullable) { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.LockoutEndDateProperty.Name%].HasValue ? new System.DateTimeOffset(System.DateTime.SpecifyKind(user.[%=IdentityUser.LockoutEndDateProperty.Name%].Value, System.DateTimeKind.Utc)) : (DateTimeOffset?)null);
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.LockoutEndDateProperty.Name%] != CodeFluent.Runtime.CodeFluentPersistence.DefaultDateTimeValue ? new System.DateTimeOffset(System.DateTime.SpecifyKind(user.[%=IdentityUser.LockoutEndDateProperty.Name%], System.DateTimeKind.Utc)) : (DateTimeOffset?)null);
            [% } %]
        }

        public virtual System.Threading.Tasks.Task SetLockoutEndDateAsync([%=userTypeName%] user, DateTimeOffset? lockoutEnd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            if (lockoutEnd == null)
            {
                user.[%=IdentityUser.LockoutEndDateProperty.Name%] = [%= IdentityUser.LockoutEndDateProperty.IsModelNullable ? "null" : "CodeFluent.Runtime.CodeFluentPersistence.DefaultDateTimeValue" %];
            }
            else
            {
                user.[%=IdentityUser.LockoutEndDateProperty.Name%] = lockoutEnd.Value.UtcDateTime;
            }

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<int> IncrementAccessFailedCountAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%] = user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%] + 1;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task ResetAccessFailedCountAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%] = 0;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<int> GetAccessFailedCountAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> GetLockoutEnabledAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult([%if(IdentityUser.LockoutEnabledProperty != null) { %]user.[%=IdentityUser.LockoutEnabledProperty.Name%][% } else { %]true[% } %]);
        }

        public virtual System.Threading.Tasks.Task SetLockoutEnabledAsync([%=userTypeName%] user, bool enabled, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%if(IdentityUser.LockoutEnabledProperty != null) { %]
            user.LockoutEnabled = enabled;[% } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }
[% } %]
[% if(TemplateProducer.CanImplementRoleStore) { %]
        public virtual System.Threading.Tasks.Task AddToRoleAsync([%=userTypeName%] user, string roleName, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=IdentityRole.Entity.ClrFullTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
            {
                throw new System.ArgumentException(string.Format("Role '{0}' does not exist.", roleName), "roleName");
            }

            role.[%=IdentityRole.UsersProperty.Name%].Add(user);
            role.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task RemoveFromRoleAsync([%=userTypeName%] user, string roleName, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=IdentityRole.Entity.ClrFullTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
            {
                throw new System.ArgumentException(string.Format("Role '{0}' does not exist.", roleName), "roleName");
            }

            if (role.[%=IdentityRole.UsersProperty.Name%].Remove(user))
            {
                role.Save();
            }

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> GetRolesAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            System.Collections.Generic.IList<string> result = new System.Collections.Generic.List<string>();
            foreach ([%=IdentityRole.Entity.ClrFullTypeName%] role in user.[%=IdentityUser.RolesProperty.Name%])
            {
                result.Add(role.[%=IdentityRole.NameProperty.Name%]);
            }

            return System.Threading.Tasks.Task.FromResult(result);
        }

        public virtual System.Threading.Tasks.Task<bool> IsInRoleAsync([%=userTypeName%] user, string roleName, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=IdentityRole.Entity.ClrFullTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
            {
                throw new System.ArgumentException(string.Format("Role '{0}' does not exist.", roleName), "roleName");
            }

            bool contains = user.[%=IdentityUser.RolesProperty.Name%].Contains(role);
            return System.Threading.Tasks.Task.FromResult(contains);
        }
[% } %]
[% if(TemplateProducer.CanImplementLoginStore) { %]

        public virtual System.Threading.Tasks.Task AddLoginAsync([%=userTypeName%] user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            if (userLoginInfo == null)
            {
                throw new ArgumentNullException("userLoginInfo");
            }

            [%=IdentityLogin.Entity.ClrFullTypeName%] login = new [%=IdentityLogin.Entity.ClrFullTypeName%]();
            login.[%=IdentityLogin.UserProperty.Name%] = user;
            login.[%=IdentityLogin.ProviderKeyProperty.Name%] = userLoginInfo.ProviderKey;
            [% if(IdentityLogin.ProviderNameProperty != null) { %]
            login.[%=IdentityLogin.ProviderNameProperty.Name%] = userLoginInfo.LoginProvider;[% } %]
            [% if(IdentityLogin.ProviderDisplayNameProperty != null) { %]
            login.[%=IdentityLogin.ProviderDisplayNameProperty.Name%] = userLoginInfo.ProviderDisplayName;[% } %]
            login.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task RemoveLoginAsync([%=userTypeName%] user, string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=CallMethod(IdentityLogin.DeleteByUserLoginInfoMethod)%](user, providerKey[% if(IdentityLogin.ProviderDisplayNameProperty != null && IdentityLogin.DeleteByUserLoginInfoMethod.Parameters.Count > 1) { %], loginProvider[% } %]);
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo>> GetLoginsAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo> result = new System.Collections.Generic.List<Microsoft.AspNet.Identity.UserLoginInfo>();
            [%=IdentityLogin.Entity.Set.ClrFullTypeName%] userLogins = user.[%=IdentityUser.LoginsProperty.Name%];
            foreach ([%=IdentityLogin.Entity.ClrFullTypeName%] userLogin in userLogins)
            {
                Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo = new Microsoft.AspNet.Identity.UserLoginInfo([%if(IdentityLogin.ProviderNameProperty != null){%]userLogin.[%=IdentityLogin.ProviderNameProperty.Name%][%}else{%]null[%}%], userLogin.[%=IdentityLogin.ProviderKeyProperty.Name%], [%if(IdentityLogin.ProviderDisplayNameProperty != null){%]userLogin.[%=IdentityLogin.ProviderDisplayNameProperty.Name%][%} else { %]null[%}%]);
                result.Add(userLoginInfo);
            }

            return System.Threading.Tasks.Task.FromResult(result);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByLoginAsync(string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            [%if(IdentityUser.LoadByUserLoginInfoMethod == null) { %]
            throw new System.InvalidOperationException();[% } else { %]
            [%=userTypeName%] user = [%=CallMethod(IdentityUser.LoadByUserLoginInfoMethod)%](providerKey[%if(IdentityUser.LoadByUserLoginInfoMethod.Parameters.Count > 1){%], loginProvider[%}%]);[% }%]
            return System.Threading.Tasks.Task.FromResult(user);
        }
[% } %]
[% if(TemplateProducer.CanImplementClaimsStore) { %]       
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>> GetClaimsAsync([%=userTypeName%] user, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            System.Collections.Generic.IList<System.Security.Claims.Claim> result = new System.Collections.Generic.List<System.Security.Claims.Claim>();
            [%=IdentityClaim.Entity.Set.ClrFullTypeName%] userClaims = user.Claims;
            foreach ([%=IdentityClaim.Entity.ClrFullTypeName%] userClaim in userClaims)
            {
                System.Security.Claims.Claim claim = new System.Security.Claims.Claim(userClaim.Type, userClaim.Value, userClaim.ValueType, userClaim.Issuer, userClaim.OriginalIssuer);
                result.Add(claim);
            }

            return System.Threading.Tasks.Task.FromResult(result);
        }

        protected virtual void CopyClaimToUserClaim([%=userTypeName%] user, System.Security.Claims.Claim claim, [%=IdentityClaim.Entity.ClrFullTypeName%] userClaim)
        {
            if(claim == null)
            {
                throw new ArgumentNullException("claim");
            }
            if(userClaim == null)
            {
                throw new ArgumentNullException("userClaim");
            }

            userClaim.[%=IdentityClaim.UserProperty.Name%] = user;
            userClaim.[%=IdentityClaim.TypeProperty.Name%] = claim.Type;
            userClaim.[%=IdentityClaim.ValueProperty.Name%] = claim.Value;[%
              if (IdentityClaim.ValueTypeProperty != null) { %]
            userClaim.[%=IdentityClaim.ValueTypeProperty.Name%] = claim.ValueType;[% 
            } if (IdentityClaim.IssuerProperty != null) { %]
            userClaim.[%=IdentityClaim.IssuerProperty.Name%] = claim.Issuer;[% 
            } if (IdentityClaim.OriginalIssuerProperty != null) { %]
            userClaim.[%=IdentityClaim.OriginalIssuerProperty.Name%] = claim.OriginalIssuer;[% } %]
        }

        public virtual System.Threading.Tasks.Task AddClaimsAsync([%=userTypeName%] user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            foreach (System.Security.Claims.Claim claim in claims)
            {
                cancellationToken.ThrowIfCancellationRequested();

                [%=IdentityClaim.Entity.ClrFullTypeName%] userClaim = new [%=IdentityClaim.Entity.ClrFullTypeName%]();
                CopyClaimToUserClaim(user, claim, userClaim);
                userClaim.Save();
            }

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task ReplaceClaimAsync([%=userTypeName%] user, System.Security.Claims.Claim claim, System.Security.Claims.Claim newClaim, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            if (claim == null)
            {
                throw new ArgumentNullException("claim");
            }
            if (newClaim == null)
            {
                throw new ArgumentNullException("newClaim");
            }
            [% if(IdentityClaim.LoadClaimsMethod != null) { %]
            [%=IdentityClaim.Entity.Set.ClrFullTypeName%] userClaims = [%=CallMethod(IdentityClaim.LoadClaimsMethod)%](claim.Type, claim.Value);
            foreach ([%=IdentityClaim.Entity.ClrFullTypeName%] userClaim in userClaims)
            {
                cancellationToken.ThrowIfCancellationRequested();

                CopyClaimToUserClaim(user, newClaim, userClaim);
                userClaim.Save();
            }

            return System.Threading.Tasks.Task.FromResult(0);[% 
            } else { %]
            throw new InvalidOperationException();[% }%]
        }

        public virtual System.Threading.Tasks.Task RemoveClaimsAsync([%=userTypeName%] user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, System.Threading.CancellationToken cancellationToken = new System.Threading.CancellationToken())
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            if (claims == null)
            {
                throw new ArgumentNullException("claims");
            }
            [% if(IdentityClaim.DeleteClaimsMethod != null) { %]
            foreach(System.Security.Claims.Claim claim in claims)
            {
                [%=CallMethod(IdentityClaim.DeleteClaimsMethod)%](claim.Type, claim.Value);
            }
            
            return System.Threading.Tasks.Task.FromResult(0);[% 
            } else { %]
            throw new InvalidOperationException();[% }%]
        }
[% } %]
[% if(TemplateProducer.CanImplementQueryableUserStore) { %]
        public virtual IQueryable<[%=userTypeName%]> Users
        {
            get
            {
                return [%=CallMethod(IdentityUser.LoadAllMethod)%]().AsQueryable();
            }
        }
[% } %]
    }
}