//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftFluent.Samples.Thinktecture.IdentityServer
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 27 May 2014 10:59.
    // Build:1.0.61214.0769
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, UserName={UserName}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class User : System.ICloneable, System.IComparable, System.IComparable<SoftFluent.Samples.Thinktecture.IdentityServer.User>, CodeFluent.Runtime.ICodeFluentCollectionEntity<string>, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<SoftFluent.Samples.Thinktecture.IdentityServer.User>, Microsoft.AspNet.Identity.IUser<System.Guid>, Microsoft.AspNet.Identity.IUser
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private byte[] _rowVersion;
        
        private System.Guid _id = CodeFluentPersistence.DefaultGuidValue;
        
        private string _userName = default(string);
        
        private System.DateTime _creationDateUTC = CodeFluentPersistence.DefaultDateTimeValue;
        
        private string _email = default(string);
        
        private bool _emailConfirmed = CodeFluentPersistence.DefaultBooleanValue;
        
        private string _phoneNumber = default(string);
        
        private bool _phoneNumberConfirmed = CodeFluentPersistence.DefaultBooleanValue;
        
        private string _password = default(string);
        
        private System.DateTime _lastPasswordChangeDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private int _failedPasswordAttemptCount = CodeFluentPersistence.DefaultInt32Value;
        
        private System.DateTime _failedPasswordAttemptWindowStart = CodeFluentPersistence.DefaultDateTimeValue;
        
        private bool _lockoutEnabled = CodeFluentPersistence.DefaultBooleanValue;
        
        private System.Nullable<System.DateTime> _lockoutEndDateUtc = null;
        
        private System.DateTime _lastProfileUpdateDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private string _securityStamp = default(string);
        
        private bool _twoFactorEnabled = CodeFluentPersistence.DefaultBooleanValue;
        
        [System.NonSerializedAttribute()]
        private SoftFluent.Samples.Thinktecture.IdentityServer.RoleCollection _roles;
        
        [System.NonSerializedAttribute()]
        private SoftFluent.Samples.Thinktecture.IdentityServer.UserClaimCollection _claims;
        
        [System.NonSerializedAttribute()]
        private SoftFluent.Samples.Thinktecture.IdentityServer.LoginCollection _logins;
        
        public User()
        {
            this._id = System.Guid.NewGuid();
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((System.Guid)(ConvertUtilities.ChangeType(value, typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.UserName;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.Guid))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((value.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
                    this._id = System.Guid.NewGuid();
                }
                else
                {
                    this._id = value;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<string>.Default.Equals(value, this._userName) == true))
                {
                    return;
                }
                string oldKey = this._userName;
                this._userName = value;
                try
                {
                    this.OnCollectionKeyChanged(oldKey);
                }
                catch (System.ArgumentException )
                {
                    this._userName = oldKey;
                    return;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UserName"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime CreationDateUTC
        {
            get
            {
                return this._creationDateUTC;
            }
            set
            {
                this._creationDateUTC = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CreationDateUTC"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                this._email = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Email"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool EmailConfirmed
        {
            get
            {
                return this._emailConfirmed;
            }
            set
            {
                this._emailConfirmed = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EmailConfirmed"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string PhoneNumber
        {
            get
            {
                return this._phoneNumber;
            }
            set
            {
                this._phoneNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PhoneNumber"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool PhoneNumberConfirmed
        {
            get
            {
                return this._phoneNumberConfirmed;
            }
            set
            {
                this._phoneNumberConfirmed = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PhoneNumberConfirmed"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                this._password = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Password"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime LastPasswordChangeDate
        {
            get
            {
                return this._lastPasswordChangeDate;
            }
            set
            {
                this._lastPasswordChangeDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastPasswordChangeDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int FailedPasswordAttemptCount
        {
            get
            {
                return this._failedPasswordAttemptCount;
            }
            set
            {
                this._failedPasswordAttemptCount = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FailedPasswordAttemptCount"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime FailedPasswordAttemptWindowStart
        {
            get
            {
                return this._failedPasswordAttemptWindowStart;
            }
            set
            {
                this._failedPasswordAttemptWindowStart = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FailedPasswordAttemptWindowStart"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool LockoutEnabled
        {
            get
            {
                return this._lockoutEnabled;
            }
            set
            {
                this._lockoutEnabled = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LockoutEnabled"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LockoutEndDateUtc
        {
            get
            {
                return this._lockoutEndDateUtc;
            }
            set
            {
                this._lockoutEndDateUtc = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LockoutEndDateUtc"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime LastProfileUpdateDate
        {
            get
            {
                return this._lastProfileUpdateDate;
            }
            set
            {
                this._lastProfileUpdateDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastProfileUpdateDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string SecurityStamp
        {
            get
            {
                return this._securityStamp;
            }
            set
            {
                this._securityStamp = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SecurityStamp"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool TwoFactorEnabled
        {
            get
            {
                return this._twoFactorEnabled;
            }
            set
            {
                this._twoFactorEnabled = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("TwoFactorEnabled"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public SoftFluent.Samples.Thinktecture.IdentityServer.RoleCollection Roles
        {
            get
            {
                if ((this._roles == null))
                {
                    if (((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._roles = new SoftFluent.Samples.Thinktecture.IdentityServer.RoleCollection(this);
                        return this._roles;
                    }
                    this._roles = SoftFluent.Samples.Thinktecture.IdentityServer.RoleCollection.LoadRolesUsersByUser(this);
                }
                return this._roles;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public SoftFluent.Samples.Thinktecture.IdentityServer.UserClaimCollection Claims
        {
            get
            {
                if ((this._claims == null))
                {
                    if (((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._claims = new SoftFluent.Samples.Thinktecture.IdentityServer.UserClaimCollection(this);
                        return this._claims;
                    }
                    this._claims = SoftFluent.Samples.Thinktecture.IdentityServer.UserClaimCollection.LoadByUser(this);
                }
                return this._claims;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public SoftFluent.Samples.Thinktecture.IdentityServer.LoginCollection Logins
        {
            get
            {
                if ((this._logins == null))
                {
                    if (((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._logins = new SoftFluent.Samples.Thinktecture.IdentityServer.LoginCollection(this);
                        return this._logins;
                    }
                    this._logins = SoftFluent.Samples.Thinktecture.IdentityServer.LoginCollection.LoadByUser(this);
                }
                return this._logins;
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        string CodeFluent.Runtime.Utilities.IKeyable<System.String>.Key
        {
            get
            {
                return this.UserName;
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        System.Guid Microsoft.AspNet.Identity.IUser<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        string Microsoft.AspNet.Identity.IUser<System.Guid>.UserName
        {
            get
            {
                return this.UserName;
            }
            set
            {
                this.UserName = value;
            }
        }
        
        string Microsoft.AspNet.Identity.IUser<string>.Id
        {
            get
            {
                return this.EntityKey;
            }
        }
        
        string Microsoft.AspNet.Identity.IUser<string>.UserName
        {
            get
            {
                return this.UserName;
            }
            set
            {
                this.UserName = value;
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        [field:System.NonSerializedAttribute()]
        public event System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>> KeyChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(SoftFluent.Samples.Thinktecture.IdentityServer.User user)
        {
            if ((user == null))
            {
                return false;
            }
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return base.Equals(user);
            }
            return (this.Id.Equals(user.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            SoftFluent.Samples.Thinktecture.IdentityServer.User user = null;
			user = obj as SoftFluent.Samples.Thinktecture.IdentityServer.User;
            return this.Equals(user);
        }
        
        internal void SaveRolesRelations()
        {
            if ((this._roles == null))
            {
                return;
            }
            System.Collections.IEnumerator enumerator = ((CodeFluent.Runtime.ICodeFluentSet)(this._roles)).Relations.GetEnumerator();
            bool b;
            for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
            {
                System.Collections.DictionaryEntry entry = ((System.Collections.DictionaryEntry)(enumerator.Current));
                SoftFluent.Samples.Thinktecture.IdentityServer.Role role = ((SoftFluent.Samples.Thinktecture.IdentityServer.Role)(entry.Key));
                CodeFluent.Runtime.CodeFluentRelationType relationType = ((CodeFluent.Runtime.CodeFluentRelationType)(entry.Value));
                if (((relationType == CodeFluent.Runtime.CodeFluentRelationType.Added) 
                            && ((role.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked) 
                            == false)))
                {
                    CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
                    persistence.CreateStoredProcedureCommand(null, "User", "SaveRoleUsers");
                    persistence.AddParameter("@Role_Id", role.Id, CodeFluentPersistence.DefaultGuidValue);
                    persistence.AddParameter("@User_Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
                    persistence.ExecuteNonQuery();
                }
                else
                {
                    CodeFluent.Runtime.CodeFluentPersistence persistence1 = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
                    persistence1.CreateStoredProcedureCommand(null, "User", "DeleteRoleUsers");
                    persistence1.AddParameter("@Role_Id", role.Id, CodeFluentPersistence.DefaultGuidValue);
                    persistence1.AddParameter("@User_Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
                    persistence1.ExecuteNonQuery();
                }
                if ((role.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked))
                {
                    role.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
            ((CodeFluent.Runtime.ICodeFluentSet)(this._roles)).Relations.Clear();
        }
        
        int System.IComparable.CompareTo(object value)
        {
            SoftFluent.Samples.Thinktecture.IdentityServer.User user = null;
user = value as SoftFluent.Samples.Thinktecture.IdentityServer.User;
            if ((user == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(user);
            return localCompareTo;
        }
        
        public virtual int CompareTo(SoftFluent.Samples.Thinktecture.IdentityServer.User user)
        {
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            int localCompareTo = this.UserName.CompareTo(user.UserName);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = SoftFluent.Samples.Thinktecture.IdentityServer.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Samples.Thinktecture.IdentityServer.User.ExternalValidate", "Type \'SoftFluent.Samples.Thinktecture.IdentityServer.User\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                string localValidate = SoftFluent.Samples.Thinktecture.IdentityServer.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Samples.Thinktecture.IdentityServer.User.Id.NullException", "\'Id\' property cannot be set to \'00000000-0000-0000-0000-000000000000\' for type \'S" +
                        "oftFluent.Samples.Thinktecture.IdentityServer.User\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate);
            }
            if ((this.UserName == default(string)))
            {
                string localValidate1 = SoftFluent.Samples.Thinktecture.IdentityServer.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Samples.Thinktecture.IdentityServer.User.UserName.NullException", "\'UserName\' property cannot be set to \'\' for type \'SoftFluent.Samples.Thinktecture" +
                        ".IdentityServer.User\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate1);
            }
            if ((this.SecurityStamp == default(string)))
            {
                string localValidate2 = SoftFluent.Samples.Thinktecture.IdentityServer.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Samples.Thinktecture.IdentityServer.User.SecurityStamp.NullException", "\'SecurityStamp\' property cannot be set to \'\' for type \'SoftFluent.Samples.Thinkte" +
                        "cture.IdentityServer.User\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate2);
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            if ((this.RowVersion == null))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Delete");
            persistence.AddParameter("@User_Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._id = CodeFluentPersistence.GetReaderValue(reader, "User_Id", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._userName = CodeFluentPersistence.GetReaderValue(reader, "User_UserName", ((string)(default(string))));
                this._creationDateUTC = CodeFluentPersistence.GetReaderValue(reader, "User_CreationDateUTC", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._email = CodeFluentPersistence.GetReaderValue(reader, "User_Email", ((string)(default(string))));
                this._emailConfirmed = CodeFluentPersistence.GetReaderValue(reader, "User_EmailConfirmed", ((bool)(CodeFluentPersistence.DefaultBooleanValue)));
                this._phoneNumber = CodeFluentPersistence.GetReaderValue(reader, "User_PhoneNumber", ((string)(default(string))));
                this._phoneNumberConfirmed = CodeFluentPersistence.GetReaderValue(reader, "User_PhoneNumberConfirmed", ((bool)(CodeFluentPersistence.DefaultBooleanValue)));
                this._password = CodeFluentPersistence.GetReaderValue(reader, "User_Password", ((string)(default(string))));
                this._lastPasswordChangeDate = CodeFluentPersistence.GetReaderValue(reader, "User_LastPasswordChangeDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._failedPasswordAttemptCount = CodeFluentPersistence.GetReaderValue(reader, "User_FailedPasswordAttemptCount", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._failedPasswordAttemptWindowStart = CodeFluentPersistence.GetReaderValue(reader, "User_FailedPasswordAttemptWindowStart", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._lockoutEnabled = CodeFluentPersistence.GetReaderValue(reader, "User_LockoutEnabled", ((bool)(CodeFluentPersistence.DefaultBooleanValue)));
                this._lockoutEndDateUtc = CodeFluentPersistence.GetReaderValue<System.DateTime>(reader, "User_LockoutEndDateUtc");
                this._lastProfileUpdateDate = CodeFluentPersistence.GetReaderValue(reader, "User_LastProfileUpdateDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._securityStamp = CodeFluentPersistence.GetReaderValue(reader, "User_SecurityStamp", ((string)(default(string))));
                this._twoFactorEnabled = CodeFluentPersistence.GetReaderValue(reader, "User_TwoFactorEnabled", ((bool)(CodeFluentPersistence.DefaultBooleanValue)));
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Samples.Thinktecture.IdentityServer.User Load(System.Guid id)
        {
            if ((id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return null;
            }
            SoftFluent.Samples.Thinktecture.IdentityServer.User user = new SoftFluent.Samples.Thinktecture.IdentityServer.User();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Load");
            persistence.AddParameter("@Id", id, CodeFluentPersistence.DefaultGuidValue);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    user.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    user.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return user;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static SoftFluent.Samples.Thinktecture.IdentityServer.User LoadByUserName(string userName)
        {
            if ((userName == default(string)))
            {
                return null;
            }
            SoftFluent.Samples.Thinktecture.IdentityServer.User user = new SoftFluent.Samples.Thinktecture.IdentityServer.User();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "LoadByUserName");
            persistence.AddParameter("@UserName", userName, default(string));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    user.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    user.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return user;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static SoftFluent.Samples.Thinktecture.IdentityServer.User LoadByProviderKey(string providerKey)
        {
            if ((providerKey == default(string)))
            {
                return null;
            }
            SoftFluent.Samples.Thinktecture.IdentityServer.User user = new SoftFluent.Samples.Thinktecture.IdentityServer.User();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "LoadByProviderKey");
            persistence.AddParameter("@providerKey", providerKey);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    user.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    user.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return user;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static SoftFluent.Samples.Thinktecture.IdentityServer.User LoadByEmail(string email)
        {
            if ((email == default(string)))
            {
                return null;
            }
            SoftFluent.Samples.Thinktecture.IdentityServer.User user = new SoftFluent.Samples.Thinktecture.IdentityServer.User();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "LoadByEmail");
            persistence.AddParameter("@Email", email, default(string));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    user.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    user.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return user;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Load");
            persistence.AddParameter("@Id", this.Id);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.Thinktecture.IdentityServer.Constants.SoftFluent_Samples_Thinktecture_IdentityServerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Save");
            persistence.AddParameter("@User_Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
            persistence.AddParameter("@User_UserName", this.UserName, default(string));
            persistence.AddRawParameter("@User_CreationDateUTC", this.CreationDateUTC);
            persistence.AddParameter("@User_Email", this.Email, default(string));
            persistence.AddRawParameter("@User_EmailConfirmed", this.EmailConfirmed);
            persistence.AddParameter("@User_PhoneNumber", this.PhoneNumber, default(string));
            persistence.AddRawParameter("@User_PhoneNumberConfirmed", this.PhoneNumberConfirmed);
            persistence.AddParameter("@User_Password", this.Password, default(string));
            persistence.AddParameter("@User_LastPasswordChangeDate", this.LastPasswordChangeDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddRawParameter("@User_FailedPasswordAttemptCount", this.FailedPasswordAttemptCount);
            persistence.AddParameter("@User_FailedPasswordAttemptWindowStart", this.FailedPasswordAttemptWindowStart, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddRawParameter("@User_LockoutEnabled", this.LockoutEnabled);
            persistence.AddParameter("@User_LockoutEndDateUtc", this.LockoutEndDateUtc);
            persistence.AddParameter("@User_LastProfileUpdateDate", this.LastProfileUpdateDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@User_SecurityStamp", this.SecurityStamp, default(string));
            persistence.AddRawParameter("@User_TwoFactorEnabled", this.TwoFactorEnabled);
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.SaveRolesRelations();
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(SoftFluent.Samples.Thinktecture.IdentityServer.User user)
        {
            if ((user == null))
            {
                return false;
            }
            bool ret = user.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(SoftFluent.Samples.Thinktecture.IdentityServer.User user)
        {
            bool ret = SoftFluent.Samples.Thinktecture.IdentityServer.User.Save(user);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(SoftFluent.Samples.Thinktecture.IdentityServer.User user)
        {
            if ((user == null))
            {
                return false;
            }
            bool ret = user.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("UserName=");
            writer.Write(this.UserName);
            writer.Write(",");
            writer.Write("CreationDateUTC=");
            writer.Write(this.CreationDateUTC);
            writer.Write(",");
            writer.Write("Email=");
            writer.Write(this.Email);
            writer.Write(",");
            writer.Write("EmailConfirmed=");
            writer.Write(this.EmailConfirmed);
            writer.Write(",");
            writer.Write("PhoneNumber=");
            writer.Write(this.PhoneNumber);
            writer.Write(",");
            writer.Write("PhoneNumberConfirmed=");
            writer.Write(this.PhoneNumberConfirmed);
            writer.Write(",");
            writer.Write("Password=");
            writer.Write(this.Password);
            writer.Write(",");
            writer.Write("LastPasswordChangeDate=");
            writer.Write(this.LastPasswordChangeDate);
            writer.Write(",");
            writer.Write("FailedPasswordAttemptCount=");
            writer.Write(this.FailedPasswordAttemptCount);
            writer.Write(",");
            writer.Write("FailedPasswordAttemptWindowStart=");
            writer.Write(this.FailedPasswordAttemptWindowStart);
            writer.Write(",");
            writer.Write("LockoutEnabled=");
            writer.Write(this.LockoutEnabled);
            writer.Write(",");
            writer.Write("LockoutEndDateUtc=");
            writer.Write(this.LockoutEndDateUtc);
            writer.Write(",");
            writer.Write("LastProfileUpdateDate=");
            writer.Write(this.LastProfileUpdateDate);
            writer.Write(",");
            writer.Write("SecurityStamp=");
            writer.Write(this.SecurityStamp);
            writer.Write(",");
            writer.Write("TwoFactorEnabled=");
            writer.Write(this.TwoFactorEnabled);
            writer.Write(",");
            writer.Write("Roles=");
            if ((this._roles != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._roles)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("Claims=");
            if ((this._claims != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._claims)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("Logins=");
            if ((this._logins != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._logins)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        public virtual void SetRoles(System.Collections.IDictionary values)
        {
            if ((values == null))
            {
                throw new System.ArgumentNullException("values");
            }
            this.Roles.Clear();
            System.Collections.IEnumerator enumerator = values.GetEnumerator();
            bool b;
            for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
            {
                System.Collections.DictionaryEntry entry = ((System.Collections.DictionaryEntry)(enumerator.Current));
                if ((entry.Key != null))
                {
                    this.Roles.AddByEntityKey(entry.Key.ToString());
                }
            }
        }
        
        public virtual void SetRoles(object values)
        {
            if ((values == null))
            {
                return;
            }
            System.Collections.IDictionary dictionary = null;
dictionary = values as System.Collections.IDictionary;
            if ((dictionary != null))
            {
                this.SetRoles(dictionary);
                return;
            }
            SoftFluent.Samples.Thinktecture.IdentityServer.RoleCollection roles = null;
roles = values as SoftFluent.Samples.Thinktecture.IdentityServer.RoleCollection;
            if ((roles != null))
            {
                this._roles = roles;
                return;
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Samples.Thinktecture.IdentityServer.User LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            SoftFluent.Samples.Thinktecture.IdentityServer.User user;
            System.Guid var = ((System.Guid)(ConvertUtilities.ChangeType(key, typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            user = SoftFluent.Samples.Thinktecture.IdentityServer.User.Load(var);
            return user;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public SoftFluent.Samples.Thinktecture.IdentityServer.User Clone(bool deep)
        {
            SoftFluent.Samples.Thinktecture.IdentityServer.User user = new SoftFluent.Samples.Thinktecture.IdentityServer.User();
            this.CopyTo(user, deep);
            return user;
        }
        
        public SoftFluent.Samples.Thinktecture.IdentityServer.User Clone()
        {
            SoftFluent.Samples.Thinktecture.IdentityServer.User localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((System.Guid)(ConvertUtilities.ChangeType(dict["Id"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            if ((dict.Contains("UserName") == true))
            {
                this.UserName = ((string)(ConvertUtilities.ChangeType(dict["UserName"], typeof(string), default(string))));
            }
            if ((dict.Contains("LockoutEnabled") == true))
            {
                this.LockoutEnabled = ((bool)(ConvertUtilities.ChangeType(dict["LockoutEnabled"], typeof(bool), CodeFluentPersistence.DefaultBooleanValue)));
            }
            if ((dict.Contains("FailedPasswordAttemptWindowStart") == true))
            {
                this.FailedPasswordAttemptWindowStart = ((System.DateTime)(ConvertUtilities.ChangeType(dict["FailedPasswordAttemptWindowStart"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("FailedPasswordAttemptCount") == true))
            {
                this.FailedPasswordAttemptCount = ((int)(ConvertUtilities.ChangeType(dict["FailedPasswordAttemptCount"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("LockoutEndDateUtc") == true))
            {
                this.LockoutEndDateUtc = ((System.Nullable<System.DateTime>)(ConvertUtilities.ChangeType(dict["LockoutEndDateUtc"], typeof(System.Nullable<System.DateTime>), null)));
            }
            if ((dict.Contains("TwoFactorEnabled") == true))
            {
                this.TwoFactorEnabled = ((bool)(ConvertUtilities.ChangeType(dict["TwoFactorEnabled"], typeof(bool), CodeFluentPersistence.DefaultBooleanValue)));
            }
            if ((dict.Contains("SecurityStamp") == true))
            {
                this.SecurityStamp = ((string)(ConvertUtilities.ChangeType(dict["SecurityStamp"], typeof(string), default(string))));
            }
            if ((dict.Contains("LastProfileUpdateDate") == true))
            {
                this.LastProfileUpdateDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["LastProfileUpdateDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("EmailConfirmed") == true))
            {
                this.EmailConfirmed = ((bool)(ConvertUtilities.ChangeType(dict["EmailConfirmed"], typeof(bool), CodeFluentPersistence.DefaultBooleanValue)));
            }
            if ((dict.Contains("Email") == true))
            {
                this.Email = ((string)(ConvertUtilities.ChangeType(dict["Email"], typeof(string), default(string))));
            }
            if ((dict.Contains("CreationDateUTC") == true))
            {
                this.CreationDateUTC = ((System.DateTime)(ConvertUtilities.ChangeType(dict["CreationDateUTC"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("PhoneNumber") == true))
            {
                this.PhoneNumber = ((string)(ConvertUtilities.ChangeType(dict["PhoneNumber"], typeof(string), default(string))));
            }
            if ((dict.Contains("LastPasswordChangeDate") == true))
            {
                this.LastPasswordChangeDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["LastPasswordChangeDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("Password") == true))
            {
                this.Password = ((string)(ConvertUtilities.ChangeType(dict["Password"], typeof(string), default(string))));
            }
            if ((dict.Contains("PhoneNumberConfirmed") == true))
            {
                this.PhoneNumberConfirmed = ((bool)(ConvertUtilities.ChangeType(dict["PhoneNumberConfirmed"], typeof(bool), CodeFluentPersistence.DefaultBooleanValue)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(SoftFluent.Samples.Thinktecture.IdentityServer.User user, bool deep)
        {
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.Id = this.Id;
            user.UserName = this.UserName;
            user.LockoutEnabled = this.LockoutEnabled;
            user.FailedPasswordAttemptWindowStart = this.FailedPasswordAttemptWindowStart;
            user.FailedPasswordAttemptCount = this.FailedPasswordAttemptCount;
            user.LockoutEndDateUtc = this.LockoutEndDateUtc;
            user.TwoFactorEnabled = this.TwoFactorEnabled;
            user.SecurityStamp = this.SecurityStamp;
            user.LastProfileUpdateDate = this.LastProfileUpdateDate;
            user.EmailConfirmed = this.EmailConfirmed;
            user.Email = this.Email;
            user.CreationDateUTC = this.CreationDateUTC;
            user.PhoneNumber = this.PhoneNumber;
            user.LastPasswordChangeDate = this.LastPasswordChangeDate;
            user.Password = this.Password;
            user.PhoneNumberConfirmed = this.PhoneNumberConfirmed;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, user));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["UserName"] = this.UserName;
            dict["LockoutEnabled"] = this.LockoutEnabled;
            dict["FailedPasswordAttemptWindowStart"] = this.FailedPasswordAttemptWindowStart;
            dict["FailedPasswordAttemptCount"] = this.FailedPasswordAttemptCount;
            dict["LockoutEndDateUtc"] = this.LockoutEndDateUtc;
            dict["TwoFactorEnabled"] = this.TwoFactorEnabled;
            dict["SecurityStamp"] = this.SecurityStamp;
            dict["LastProfileUpdateDate"] = this.LastProfileUpdateDate;
            dict["EmailConfirmed"] = this.EmailConfirmed;
            dict["Email"] = this.Email;
            dict["CreationDateUTC"] = this.CreationDateUTC;
            dict["PhoneNumber"] = this.PhoneNumber;
            dict["LastPasswordChangeDate"] = this.LastPasswordChangeDate;
            dict["Password"] = this.Password;
            dict["PhoneNumberConfirmed"] = this.PhoneNumberConfirmed;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        protected void OnCollectionKeyChanged(string key)
        {
            if ((this.KeyChanged != null))
            {
                this.KeyChanged(this, new CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>(key));
            }
        }
    }
}
