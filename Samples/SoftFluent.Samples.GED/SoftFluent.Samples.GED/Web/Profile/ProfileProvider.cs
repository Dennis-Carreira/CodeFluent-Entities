//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// CodeFluent Entities generated (http://www.softfluent.com). Date: Thursday, 08 May 2014 20:42. Build: 1.0.61214.0769
namespace SoftFluent.Samples.GED.Web.Profile
{
	using System;
	using System.Collections.Generic;
	using System.Configuration;
	using System.Configuration.Provider;
	using System.Web;
	using System.Web.Profile;
	using CodeFluent.Runtime.Utilities;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769")]
    public partial class ProfileProvider: System.Web.Profile.ProfileProvider
    {
        private const string applicationName = "ProfileProvider$SoftFluent.Samples.GED";
        private static ProfileProvider _current;
        
		private string _applicationName = applicationName;
		private string _emailFormat = "{0}@example.com";

        public override string ApplicationName
        {
            get
            {
                return _applicationName;
            }
            set
            {
                _applicationName = value;
            }
        }

        public virtual string EmailFormat
        {
            get
            {
                return _emailFormat;
            }
        }

        public static ProfileProvider Current
        {
			get
			{
				if (_current == null)
				{
					foreach(System.Web.Profile.ProfileProvider provider in ProfileManager.Providers)
					{
						_current = provider as ProfileProvider;
						if (_current != null)
							break;
					}
					if (_current == null)
						throw new ProviderException(SoftFluent.Samples.GED.Resources.Manager.GetStringWithDefault("ProviderNotFound", "No provider of type SoftFluent.Samples.GED.Web.Profile.ProfileProvider was found."));
				}
				return _current;
			}			
        }

		public override void Initialize(string name, System.Collections.Specialized.NameValueCollection config)
		{
			if (config == null)
				throw new ArgumentNullException("config");
				
			if (string.IsNullOrEmpty(name))
			{
				name = "SoftFluent.Samples.GEDRoleProvider";
			}
			if (string.IsNullOrEmpty(config["description"]))
			{
				config.Remove("description");
				config.Add("description", SoftFluent.Samples.GED.Resources.Manager.GetStringWithDefault("ProfileProviderDescription", "SoftFluent.Samples.GED"));
			}
			base.Initialize(name, config);

			_applicationName = config["applicationName"];
			if (string.IsNullOrEmpty(_applicationName))
			{
				_applicationName = applicationName;
			}
			
			_emailFormat = config["emailFormat"];
			if (string.IsNullOrEmpty(_emailFormat))
			{
				_emailFormat = "{0}@example.com";
			}

			config.Remove("applicationName");
			config.Remove("name");
			config.Remove("emailFormat");
		}

	    public override int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
	    {
			global::SoftFluent.Samples.GED.Security.UserCollection.DeleteInactiveProfiles((int)authenticationOption, userInactiveSinceDate);
			return 1;
	    }
	    
	    public override int DeleteProfiles(string[] usernames)
		{
			if (usernames == null)
				throw new ArgumentNullException("usernames");

			int count = 0;
			List<global::SoftFluent.Samples.GED.Security.User> users = new List<global::SoftFluent.Samples.GED.Security.User>(usernames.Length);
			foreach(string username in usernames)
			{
				if (username == null)
					continue;
					
				global::SoftFluent.Samples.GED.Security.User user = global::SoftFluent.Samples.GED.Security.User.LoadByUserName(username);
				if (user == null)
					throw new ProviderException(SoftFluent.Samples.GED.Resources.Manager.GetStringWithDefault("UserNotFound", "User '{0}' was not found.", new object[]{username}));
					
				if (user.Delete())
				{
					count++;
				}
			}
			return count;
		}

		public override int DeleteProfiles(System.Web.Profile.ProfileInfoCollection profiles)
		{
			if (profiles == null)
				throw new ArgumentNullException("profiles");

			if (profiles.Count == 0)
				return 0;
				
			string[] usernames = new string[profiles.Count];
			int i = 0;
			foreach(ProfileInfo info in profiles)
			{
				usernames[i++] = info.UserName;
			}
			return DeleteProfiles(usernames);
		}
		
		public virtual ProfileInfo ProfileInfoFromUser(global::SoftFluent.Samples.GED.Security.User user)
		{
			if (user == null)
				return null;
				
			return new ProfileInfo(
				user.UserName,
				user.IsAnonymous,
				user.LastActivityDate.ToLocalTime(),
				DateTime.MinValue,
				0);
		}

        public virtual ProfileInfoCollection ProfileInfoCollectionFromCollection(global::SoftFluent.Samples.GED.Security.UserCollection users)
        {
            ProfileInfoCollection profiles = new ProfileInfoCollection();
            foreach (global::SoftFluent.Samples.GED.Security.User user in users)
            {
                profiles.Add(ProfileInfoFromUser(user));
            }
            return profiles;
        }
		
		public override ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, out int totalRecords)
		{
			global::SoftFluent.Samples.GED.Security.UserCollection users = global::SoftFluent.Samples.GED.Security.UserCollection.PageFindInactiveProfilesByUserName(pageIndex, pageSize, null, (int)authenticationOption, usernameToMatch, userInactiveSinceDate);
            ProfileInfoCollection profiles = ProfileInfoCollectionFromCollection(users);
			if ((profiles.Count == 0) || (profiles.Count < pageSize))
			{
	            totalRecords = pageSize * pageIndex + profiles.Count;
			}
			else
			{
	            totalRecords = pageSize * (pageIndex + 1) + 1; // force next page read
            }
            return profiles;
		}

		public override ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, out int totalRecords)
		{
			global::SoftFluent.Samples.GED.Security.UserCollection users = global::SoftFluent.Samples.GED.Security.UserCollection.PageFindProfilesByUserName(pageIndex, pageSize, null, (int)authenticationOption, usernameToMatch);
            ProfileInfoCollection profiles = ProfileInfoCollectionFromCollection(users);
			if ((profiles.Count == 0) || (profiles.Count < pageSize))
			{
	            totalRecords = pageSize * pageIndex + profiles.Count;
			}
			else
			{
	            totalRecords = pageSize * (pageIndex + 1) + 1; // force next page read
            }
            return profiles;
		}
		
		public override ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, out int totalRecords)
		{
			global::SoftFluent.Samples.GED.Security.UserCollection users = global::SoftFluent.Samples.GED.Security.UserCollection.PageLoadAllInactiveProfiles(pageIndex, pageSize, null, (int)authenticationOption, userInactiveSinceDate);
            ProfileInfoCollection profiles = ProfileInfoCollectionFromCollection(users);
			if ((profiles.Count == 0) || (profiles.Count < pageSize))
			{
	            totalRecords = pageSize * pageIndex + profiles.Count;
			}
			else
			{
	            totalRecords = pageSize * (pageIndex + 1) + 1; // force next page read
            }
            return profiles;
		}
		
		public override ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, out int totalRecords)
		{
			global::SoftFluent.Samples.GED.Security.UserCollection users = global::SoftFluent.Samples.GED.Security.UserCollection.PageLoadAllProfiles(pageIndex, pageSize, null, (int)authenticationOption);
            ProfileInfoCollection profiles = ProfileInfoCollectionFromCollection(users);
			if ((profiles.Count == 0) || (profiles.Count < pageSize))
			{
	            totalRecords = pageSize * pageIndex + profiles.Count;
			}
			else
			{
	            totalRecords = pageSize * (pageIndex + 1) + 1; // force next page read
            }
            return profiles;
		}
 
		public override int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
		{
			return global::SoftFluent.Samples.GED.Security.UserCollection.CountInactiveProfiles((int)authenticationOption, userInactiveSinceDate);
		}

		public override SettingsPropertyValueCollection GetPropertyValues(SettingsContext sc, SettingsPropertyCollection properties)
		{
			SettingsPropertyValueCollection values = new SettingsPropertyValueCollection();
			if (properties.Count == 0)
				return values;

			string username = (string)sc["UserName"];
			if (string.IsNullOrEmpty(username))
				return values;

			global::SoftFluent.Samples.GED.Security.User user = global::SoftFluent.Samples.GED.Security.User.LoadByUserName(username);
				
			foreach(SettingsProperty property in properties)
			{
				SettingsPropertyValue value = new SettingsPropertyValue(property);
				if (user != null)
				{
					value.PropertyValue = ConvertUtilities.ChangeType(user.Properties[property.Name], property.PropertyType, property.DefaultValue);
					value.Deserialized = true;
					value.IsDirty = false;
				}
				values.Add(value);
			}
			return values;
		}
		
		public override void SetPropertyValues(SettingsContext sc, SettingsPropertyValueCollection properties)
		{
			string username = (string)sc["UserName"];
			if ((string.IsNullOrEmpty(username)) || (properties.Count == 0))
				return;
				
			bool isAnonymous = !(bool)sc["IsAuthenticated"];
				
			bool dirty = false;
            foreach(SettingsPropertyValue value in properties)
            {
                if ((value.IsDirty) &&
					((!isAnonymous) || ((bool)value.Property.Attributes["AllowAnonymous"])))
                {
					dirty = true;
					break;
                }
            }
            
            if (!dirty)
				return;

			global::SoftFluent.Samples.GED.Security.User user = global::SoftFluent.Samples.GED.Security.User.LoadByUserName(username);
			if (user == null)
			{
				user = new global::SoftFluent.Samples.GED.Security.User();
				user.UserName = username;
				user.Email = string.Format(EmailFormat, username);
			}
			user.IsAnonymous = isAnonymous;
			if (user.Properties == null)
			{
				user.Properties = new System.Collections.Specialized.OrderedDictionary(System.StringComparer.CurrentCultureIgnoreCase);
			}
            foreach(SettingsPropertyValue value in properties)
            {
                if (((value.IsDirty) || (!(value.UsingDefaultValue))) &&
					((!isAnonymous) || ((bool)value.Property.Attributes["AllowAnonymous"])))
                {
					user.Properties[value.Name] = value.PropertyValue;
                }
            }

			
			SoftFluent.Samples.GED.Web.Security.MembershipProvider.UpdateUserActivity(user, false);
			user.Save();
		}
    }
}
