//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftFluent.Samples.GED.Security
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Thursday, 08 May 2014 20:42.
    // Build:1.0.61214.0769
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, UserName={UserName}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class User : System.ICloneable, System.IComparable, System.IComparable<SoftFluent.Samples.GED.Security.User>, CodeFluent.Runtime.ICodeFluentCollectionEntity<string>, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<SoftFluent.Samples.GED.Security.User>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private byte[] _rowVersion;
        
        private System.Guid _id = CodeFluentPersistence.DefaultGuidValue;
        
        private string _userName = default(string);
        
        private string _email = default(string);
        
        private int _failedPasswordAttemptCount = CodeFluentPersistence.DefaultInt32Value;
        
        private System.DateTime _failedPasswordAttemptWindowStart = CodeFluentPersistence.DefaultDateTimeValue;
        
        private bool _isLockedOut = CodeFluentPersistence.DefaultBooleanValue;
        
        private System.DateTime _lastActivityDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _lastLockoutDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _lastLoginDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _lastPasswordChangeDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private string _password = default(string);
        
        private string _passwordSalt = default(string);
        
        [System.NonSerializedAttribute()]
        private System.Collections.Specialized.OrderedDictionary _properties = default(System.Collections.Specialized.OrderedDictionary);
        
        [System.NonSerializedAttribute()]
        private SoftFluent.Samples.GED.Security.UserRoleCollection _roles;
        
        private bool _isAnonymous = false;
        
        public User()
        {
            this._id = System.Guid.NewGuid();
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((System.Guid)(ConvertUtilities.ChangeType(value, typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.UserName;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.Guid))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((value.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
                    this._id = System.Guid.NewGuid();
                }
                else
                {
                    this._id = value;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<string>.Default.Equals(value, this._userName) == true))
                {
                    return;
                }
                string oldKey = this._userName;
                this._userName = value;
                try
                {
                    this.OnCollectionKeyChanged(oldKey);
                }
                catch (System.ArgumentException )
                {
                    this._userName = oldKey;
                    return;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UserName"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                this._email = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Email"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int FailedPasswordAttemptCount
        {
            get
            {
                return this._failedPasswordAttemptCount;
            }
            set
            {
                this._failedPasswordAttemptCount = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FailedPasswordAttemptCount"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime FailedPasswordAttemptWindowStart
        {
            get
            {
                return this._failedPasswordAttemptWindowStart;
            }
            set
            {
                this._failedPasswordAttemptWindowStart = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FailedPasswordAttemptWindowStart"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool IsLockedOut
        {
            get
            {
                return this._isLockedOut;
            }
            set
            {
                this._isLockedOut = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IsLockedOut"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime LastActivityDate
        {
            get
            {
                return this._lastActivityDate;
            }
            set
            {
                this._lastActivityDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastActivityDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime LastLockoutDate
        {
            get
            {
                return this._lastLockoutDate;
            }
            set
            {
                this._lastLockoutDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastLockoutDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime LastLoginDate
        {
            get
            {
                return this._lastLoginDate;
            }
            set
            {
                this._lastLoginDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastLoginDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime LastPasswordChangeDate
        {
            get
            {
                return this._lastPasswordChangeDate;
            }
            set
            {
                this._lastPasswordChangeDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastPasswordChangeDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                this._password = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Password"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string PasswordSalt
        {
            get
            {
                return this._passwordSalt;
            }
            set
            {
                this._passwordSalt = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PasswordSalt"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Collections.Specialized.OrderedDictionary Properties
        {
            get
            {
                return this._properties;
            }
            set
            {
                this._properties = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Properties"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public SoftFluent.Samples.GED.Security.UserRoleCollection Roles
        {
            get
            {
                if ((this._roles == null))
                {
                    if (((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._roles = new SoftFluent.Samples.GED.Security.UserRoleCollection(null, this);
                        return this._roles;
                    }
                    this._roles = SoftFluent.Samples.GED.Security.UserRoleCollection.LoadByUser(this);
                }
                return this._roles;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((bool)(false)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool IsAnonymous
        {
            get
            {
                return this._isAnonymous;
            }
            set
            {
                this._isAnonymous = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IsAnonymous"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        string CodeFluent.Runtime.Utilities.IKeyable<System.String>.Key
        {
            get
            {
                return this.UserName;
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        [field:System.NonSerializedAttribute()]
        public event System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>> KeyChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(SoftFluent.Samples.GED.Security.User user)
        {
            if ((user == null))
            {
                return false;
            }
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return base.Equals(user);
            }
            return (this.Id.Equals(user.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            SoftFluent.Samples.GED.Security.User user = null;
			user = obj as SoftFluent.Samples.GED.Security.User;
            return this.Equals(user);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            SoftFluent.Samples.GED.Security.User user = null;
user = value as SoftFluent.Samples.GED.Security.User;
            if ((user == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(user);
            return localCompareTo;
        }
        
        public virtual int CompareTo(SoftFluent.Samples.GED.Security.User user)
        {
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            int localCompareTo = this.UserName.CompareTo(user.UserName);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = SoftFluent.Samples.GED.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Samples.GED.Security.User.ExternalValidate", "Type \'SoftFluent.Samples.GED.Security.User\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                string localValidate = SoftFluent.Samples.GED.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Samples.GED.Security.User.Id.NullException", "\'Id\' property cannot be set to \'00000000-0000-0000-0000-000000000000\' for type \'S" +
                        "oftFluent.Samples.GED.Security.User\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate);
            }
            if ((this.UserName == default(string)))
            {
                string localValidate1 = SoftFluent.Samples.GED.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Samples.GED.Security.User.UserName.NullException", "\'UserName\' property cannot be set to \'\' for type \'SoftFluent.Samples.GED.Security" +
                        ".User\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate1);
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            if ((this.RowVersion == null))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Delete");
            persistence.AddParameter("@User_Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._id = CodeFluentPersistence.GetReaderValue(reader, "User_Id", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._userName = CodeFluentPersistence.GetReaderValue(reader, "User_UserName", ((string)(default(string))));
                this._email = CodeFluentPersistence.GetReaderValue(reader, "User_Email", ((string)(default(string))));
                this._failedPasswordAttemptCount = CodeFluentPersistence.GetReaderValue(reader, "User_FailedPasswordAttemptCount", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._failedPasswordAttemptWindowStart = CodeFluentPersistence.GetReaderValue(reader, "User_FailedPasswordAttemptWindowStart", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._isLockedOut = CodeFluentPersistence.GetReaderValue(reader, "User_IsLockedOut", ((bool)(CodeFluentPersistence.DefaultBooleanValue)));
                this._lastActivityDate = CodeFluentPersistence.GetReaderValue(reader, "User_LastActivityDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._lastLockoutDate = CodeFluentPersistence.GetReaderValue(reader, "User_LastLockoutDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._lastLoginDate = CodeFluentPersistence.GetReaderValue(reader, "User_LastLoginDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._lastPasswordChangeDate = CodeFluentPersistence.GetReaderValue(reader, "User_LastPasswordChangeDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._password = CodeFluentPersistence.GetReaderValue(reader, "User_Password", ((string)(default(string))));
                this._passwordSalt = CodeFluentPersistence.GetReaderValue(reader, "User_PasswordSalt", ((string)(default(string))));
                CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
                this._properties = ((System.Collections.Specialized.OrderedDictionary)(persistence.GetReaderValueObject(reader, "User_Properties", default(System.Collections.Specialized.OrderedDictionary), typeof(System.Collections.Specialized.OrderedDictionary), CodeFluent.Runtime.PersistenceSerializationMode.Default)));
                this._isAnonymous = CodeFluentPersistence.GetReaderValue(reader, "User_IsAnonymous", ((bool)(false)));
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Samples.GED.Security.User Load(System.Guid id)
        {
            if ((id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return null;
            }
            SoftFluent.Samples.GED.Security.User user = new SoftFluent.Samples.GED.Security.User();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Load");
            persistence.AddParameter("@Id", id, CodeFluentPersistence.DefaultGuidValue);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    user.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    user.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return user;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static SoftFluent.Samples.GED.Security.User LoadByUserName(string userName)
        {
            if ((userName == default(string)))
            {
                return null;
            }
            SoftFluent.Samples.GED.Security.User user = new SoftFluent.Samples.GED.Security.User();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "LoadByUserName");
            persistence.AddParameter("@UserName", userName, default(string));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    user.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    user.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return user;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static SoftFluent.Samples.GED.Security.User LoadByEmail(string email)
        {
            if ((email == default(string)))
            {
                return null;
            }
            SoftFluent.Samples.GED.Security.User user = new SoftFluent.Samples.GED.Security.User();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "LoadByEmail");
            persistence.AddParameter("@Email", email, default(string));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    user.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    user.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return user;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public static void UpdateActivity(System.Guid id, System.DateTime lastActivityDate, System.DateTime lastLoginDate)
        {
            if ((id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                throw new System.ArgumentNullException("id");
            }
            if ((lastActivityDate == CodeFluentPersistence.DefaultDateTimeValue))
            {
                throw new System.ArgumentNullException("lastActivityDate");
            }
            if ((lastLoginDate == CodeFluentPersistence.DefaultDateTimeValue))
            {
                throw new System.ArgumentNullException("lastLoginDate");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "UpdateActivity");
            persistence.AddParameter("@Id", id, CodeFluentPersistence.DefaultGuidValue);
            persistence.AddParameter("@LastActivityDate", lastActivityDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@LastLoginDate", lastLoginDate, CodeFluentPersistence.DefaultDateTimeValue);
            System.Data.IDataReader reader = null;
            try
            {
                persistence.ExecuteNonQuery();
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Load");
            persistence.AddParameter("@Id", this.Id);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Samples.GED.Constants.SoftFluent_Samples_GEDStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "User", "Save");
            persistence.AddParameter("@User_Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
            persistence.AddParameter("@User_UserName", this.UserName, default(string));
            persistence.AddParameter("@User_Email", this.Email, default(string));
            persistence.AddParameter("@User_FailedPasswordAttemptCount", this.FailedPasswordAttemptCount, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@User_FailedPasswordAttemptWindowStart", this.FailedPasswordAttemptWindowStart, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddRawParameter("@User_IsLockedOut", this.IsLockedOut);
            persistence.AddParameter("@User_LastActivityDate", this.LastActivityDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@User_LastLockoutDate", this.LastLockoutDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@User_LastLoginDate", this.LastLoginDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@User_LastPasswordChangeDate", this.LastPasswordChangeDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@User_Password", this.Password, default(string));
            persistence.AddParameter("@User_PasswordSalt", this.PasswordSalt, default(string));
            persistence.AddParameterObject("@User_Properties", this.Properties, typeof(System.Collections.Specialized.OrderedDictionary), CodeFluent.Runtime.PersistenceSerializationMode.Default);
            persistence.AddRawParameter("@User_IsAnonymous", this.IsAnonymous);
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(SoftFluent.Samples.GED.Security.User user)
        {
            if ((user == null))
            {
                return false;
            }
            bool ret = user.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(SoftFluent.Samples.GED.Security.User user)
        {
            bool ret = SoftFluent.Samples.GED.Security.User.Save(user);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(SoftFluent.Samples.GED.Security.User user)
        {
            if ((user == null))
            {
                return false;
            }
            bool ret = user.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("UserName=");
            writer.Write(this.UserName);
            writer.Write(",");
            writer.Write("Email=");
            writer.Write(this.Email);
            writer.Write(",");
            writer.Write("FailedPasswordAttemptCount=");
            writer.Write(this.FailedPasswordAttemptCount);
            writer.Write(",");
            writer.Write("FailedPasswordAttemptWindowStart=");
            writer.Write(this.FailedPasswordAttemptWindowStart);
            writer.Write(",");
            writer.Write("IsLockedOut=");
            writer.Write(this.IsLockedOut);
            writer.Write(",");
            writer.Write("LastActivityDate=");
            writer.Write(this.LastActivityDate);
            writer.Write(",");
            writer.Write("LastLockoutDate=");
            writer.Write(this.LastLockoutDate);
            writer.Write(",");
            writer.Write("LastLoginDate=");
            writer.Write(this.LastLoginDate);
            writer.Write(",");
            writer.Write("LastPasswordChangeDate=");
            writer.Write(this.LastPasswordChangeDate);
            writer.Write(",");
            writer.Write("Password=");
            writer.Write(this.Password);
            writer.Write(",");
            writer.Write("PasswordSalt=");
            writer.Write(this.PasswordSalt);
            writer.Write(",");
            writer.Write("Properties=");
            writer.Write(this.Properties);
            writer.Write(",");
            writer.Write("Roles=");
            if ((this._roles != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._roles)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("IsAnonymous=");
            writer.Write(this.IsAnonymous);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Samples.GED.Security.User LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            SoftFluent.Samples.GED.Security.User user;
            System.Guid var = ((System.Guid)(ConvertUtilities.ChangeType(key, typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            user = SoftFluent.Samples.GED.Security.User.Load(var);
            return user;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public SoftFluent.Samples.GED.Security.User Clone(bool deep)
        {
            SoftFluent.Samples.GED.Security.User user = new SoftFluent.Samples.GED.Security.User();
            this.CopyTo(user, deep);
            return user;
        }
        
        public SoftFluent.Samples.GED.Security.User Clone()
        {
            SoftFluent.Samples.GED.Security.User localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((System.Guid)(ConvertUtilities.ChangeType(dict["Id"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            if ((dict.Contains("UserName") == true))
            {
                this.UserName = ((string)(ConvertUtilities.ChangeType(dict["UserName"], typeof(string), default(string))));
            }
            if ((dict.Contains("Password") == true))
            {
                this.Password = ((string)(ConvertUtilities.ChangeType(dict["Password"], typeof(string), default(string))));
            }
            if ((dict.Contains("LastPasswordChangeDate") == true))
            {
                this.LastPasswordChangeDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["LastPasswordChangeDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("LastLoginDate") == true))
            {
                this.LastLoginDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["LastLoginDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("IsAnonymous") == true))
            {
                this.IsAnonymous = ((bool)(ConvertUtilities.ChangeType(dict["IsAnonymous"], typeof(bool), false)));
            }
            if ((dict.Contains("Properties") == true))
            {
                this.Properties = ((System.Collections.Specialized.OrderedDictionary)(ConvertUtilities.ChangeType(dict["Properties"], typeof(System.Collections.Specialized.OrderedDictionary), default(System.Collections.Specialized.OrderedDictionary))));
            }
            if ((dict.Contains("PasswordSalt") == true))
            {
                this.PasswordSalt = ((string)(ConvertUtilities.ChangeType(dict["PasswordSalt"], typeof(string), default(string))));
            }
            if ((dict.Contains("FailedPasswordAttemptWindowStart") == true))
            {
                this.FailedPasswordAttemptWindowStart = ((System.DateTime)(ConvertUtilities.ChangeType(dict["FailedPasswordAttemptWindowStart"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("FailedPasswordAttemptCount") == true))
            {
                this.FailedPasswordAttemptCount = ((int)(ConvertUtilities.ChangeType(dict["FailedPasswordAttemptCount"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("Email") == true))
            {
                this.Email = ((string)(ConvertUtilities.ChangeType(dict["Email"], typeof(string), default(string))));
            }
            if ((dict.Contains("LastLockoutDate") == true))
            {
                this.LastLockoutDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["LastLockoutDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("LastActivityDate") == true))
            {
                this.LastActivityDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["LastActivityDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("IsLockedOut") == true))
            {
                this.IsLockedOut = ((bool)(ConvertUtilities.ChangeType(dict["IsLockedOut"], typeof(bool), CodeFluentPersistence.DefaultBooleanValue)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(SoftFluent.Samples.GED.Security.User user, bool deep)
        {
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.Id = this.Id;
            user.UserName = this.UserName;
            user.Password = this.Password;
            user.LastPasswordChangeDate = this.LastPasswordChangeDate;
            user.LastLoginDate = this.LastLoginDate;
            user.IsAnonymous = this.IsAnonymous;
            user.Properties = this.Properties;
            user.PasswordSalt = this.PasswordSalt;
            user.FailedPasswordAttemptWindowStart = this.FailedPasswordAttemptWindowStart;
            user.FailedPasswordAttemptCount = this.FailedPasswordAttemptCount;
            user.Email = this.Email;
            user.LastLockoutDate = this.LastLockoutDate;
            user.LastActivityDate = this.LastActivityDate;
            user.IsLockedOut = this.IsLockedOut;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, user));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["UserName"] = this.UserName;
            dict["Password"] = this.Password;
            dict["LastPasswordChangeDate"] = this.LastPasswordChangeDate;
            dict["LastLoginDate"] = this.LastLoginDate;
            dict["IsAnonymous"] = this.IsAnonymous;
            dict["Properties"] = this.Properties;
            dict["PasswordSalt"] = this.PasswordSalt;
            dict["FailedPasswordAttemptWindowStart"] = this.FailedPasswordAttemptWindowStart;
            dict["FailedPasswordAttemptCount"] = this.FailedPasswordAttemptCount;
            dict["Email"] = this.Email;
            dict["LastLockoutDate"] = this.LastLockoutDate;
            dict["LastActivityDate"] = this.LastActivityDate;
            dict["IsLockedOut"] = this.IsLockedOut;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        protected void OnCollectionKeyChanged(string key)
        {
            if ((this.KeyChanged != null))
            {
                this.KeyChanged(this, new CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>(key));
            }
        }
    }
}
