//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactManager.Services
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated Thursday, 13 February 2014 19:31.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0762")]
    [CodeFluent.Runtime.BinaryServices.BitsServerAttribute(typeof(ContactManager.Web.ContactManagerBitsServer))]
    public partial class UserService : ContactManager.Services.IUserService, CodeFluent.Runtime.BinaryServices.ICodeFluentBinaryService
    {
        
        private static CodeFluent.Runtime.BinaryServices.WcfServer _cf_rt_wcfServer = new CodeFluent.Runtime.BinaryServices.WcfServer("UserService");
        
        public virtual string Validate(ContactManager.User user, string culture)
        {
            System.Globalization.CultureInfo cultureInfo = ConvertUtilities.ToCultureInfo(culture);
            ContactManager.User user1 = user;
            if ((user1 == null))
            {
                return default(string);
            }
            return user1.Validate(cultureInfo);
        }
        
        public virtual bool Delete(ContactManager.User user)
        {
            ContactManager.User user1 = user;
            if ((user1 == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return user1.Delete();
        }
        
        public virtual ContactManager.User Load(int id)
        {
            return ContactManager.User.Load(id);
        }
        
        public virtual ContactManager.User LoadByEmail(string email)
        {
            return ContactManager.User.LoadByEmail(email);
        }
        
        public virtual bool Save(ContactManager.User user)
        {
            ContactManager.User user1 = user;
            if ((user1 == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return user1.Save();
        }
        
        public virtual bool SaveByRef(ref ContactManager.User user)
        {
            ContactManager.User user1 = user;
            if ((user1 == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            bool ret = user1.Save();
            user = user1;
            return ret;
        }
        
        public virtual ContactManager.User LoadByEntityKey(string key)
        {
            return ContactManager.User.LoadByEntityKey(key);
        }
        
        public virtual bool DeleteByKey(int id)
        {
            ContactManager.User user = ContactManager.User.Load(id);
            if ((user == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return user.Delete();
        }
        
        public virtual void SaveAll(ContactManager.UserCollection userCollection)
        {
            ContactManager.UserCollection userCollection1 = userCollection;
            userCollection1.SaveAll();
        }
        
        public virtual ContactManager.UserCollection PageLoadAll(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions)
        {
            return ContactManager.UserCollection.PageLoadAll(pageIndex, pageSize, pageOptions);
        }
        
        public virtual ContactManager.UserCollection LoadAll()
        {
            return ContactManager.UserCollection.LoadAll();
        }
        
        public virtual ContactManager.UserCollection PageSearch(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, int id, string email, string firstName, string lastName)
        {
            return ContactManager.UserCollection.PageSearch(pageIndex, pageSize, pageOptions, id, email, firstName, lastName);
        }
        
        public virtual ContactManager.UserCollection Search(int id, string email, string firstName, string lastName)
        {
            return ContactManager.UserCollection.Search(id, email, firstName, lastName);
        }
        
        public virtual CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage LoadPhoto(CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage request)
        {
            if ((request == null))
            {
                throw new System.ArgumentNullException("request");
            }
            ContactManager.User user = ContactManager.User.LoadByEntityKey(request.EntityKey);
            if ((user == null))
            {
                return new CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage(request);
            }
            return UserService._cf_rt_wcfServer.Load(user.Photo, request);
        }
        
        public virtual CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage SavePhoto(CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage request)
        {
            if ((request == null))
            {
                throw new System.ArgumentNullException("request");
            }
            ContactManager.User user = ContactManager.User.LoadByEntityKey(request.EntityKey);
            if ((user == null))
            {
                return new CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage(request);
            }
            return UserService._cf_rt_wcfServer.Save(user.Photo, request);
        }
        
        CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage CodeFluent.Runtime.BinaryServices.ICodeFluentBinaryService.Load(CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage request)
        {
            if ((request == null))
            {
                throw new System.ArgumentNullException("request");
            }
            if ((request.PropertyName == "Photo"))
            {
                return this.LoadPhoto(request);
            }
            throw new System.NotSupportedException();
        }
        
        CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage CodeFluent.Runtime.BinaryServices.ICodeFluentBinaryService.Save(CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMessage request)
        {
            if ((request == null))
            {
                throw new System.ArgumentNullException("request");
            }
            if ((request.PropertyName == "Photo"))
            {
                return this.SavePhoto(request);
            }
            throw new System.NotSupportedException();
        }
    }
}
