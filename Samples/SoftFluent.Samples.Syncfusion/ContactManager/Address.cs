//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactManager
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Thursday, 13 February 2014 19:31.
    // Build:1.0.61214.0762
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0762")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, Line1={Line1}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.contactmanager.com")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CodeFluent.Runtime.CodeFluentRelationType))]
    public partial class Address : System.ICloneable, System.IComparable, System.IComparable<ContactManager.Address>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<ContactManager.Address>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private byte[] _rowVersion;
        
        private int _id = -1;
        
        private string _line1 = default(string);
        
        private string _line2 = default(string);
        
        private string _city = default(string);
        
        private string _zip = default(string);
        
        private string _country = default(string);
        
        private int _contactId = -1;
        
        [System.NonSerializedAttribute()]
        private ContactManager.Contact _contact = null;
        
        private string _googleMapUrl = default(string);
        
        private string _liveMapUrl = default(string);
        
        [System.NonSerializedAttribute()]
        private bool _isSerializing;
        
        [System.NonSerializedAttribute()]
        private bool _isDeserializing;
        
#if SILVERLIGHT
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
public CodeFluent.Runtime.CodeFluentEntityState _entityState;
#else
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
private CodeFluent.Runtime.CodeFluentEntityState _entityState;
#endif
        // Snippet method '_snippet104515933'
private void OnGetGoogleMapUrl()
        {
          if (_googleMapUrl != null) return;
          _googleMapUrl = "http://maps.google.com/maps?q=" + System.Web.HttpUtility.UrlEncode(string.Format("ContactManager,{1} {2},{3:EnglishName}", Line1, Zip, City, Country), System.Text.Encoding.UTF8);
        }
        // Snippet method '_snippet1397887431'
private void OnGetLiveMapUrl()
        {
          if (_liveMapUrl != null) return;
          _liveMapUrl = "http://maps.live.com/default.aspx?where1=" + System.Web.HttpUtility.UrlEncode(string.Format("ContactManager,{1},{2:EnglishName}", Line1, City, Country), System.Text.Encoding.UTF8) + "&v=2";
        }
        
        public Address()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.Line1;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=100)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=200)]
        public string Line1
        {
            get
            {
                return this._line1;
            }
            set
            {
                this._line1 = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Line1"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=300)]
        public string Line2
        {
            get
            {
                return this._line2;
            }
            set
            {
                this._line2 = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Line2"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=400)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                this._city = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("City"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=500)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                this._zip = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Zip"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=600)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                this._country = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Country"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(Order=699)]
        public int ContactId
        {
            get
            {
                if (((this._contactId == -1) 
                            && (this._contact != null)))
                {
                    this._contactId = this._contact.Id;
                }
                return this._contactId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.ContactId) == true))
                {
                    return;
                }
                this._contact = null;
                this._contactId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Contact"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ContactId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ContactManager.Contact Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = ContactManager.Contact.Load(this._contactId);
                }
                return this._contact;
            }
            set
            {
                if ((value != null))
                {
                    value.AddressId = this.Id;
                }
                this._contactId = -1;
                this._contact = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Contact"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ContactId"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=800)]
        public string GoogleMapUrl
        {
            get
            {
                this.OnGetGoogleMapUrl();
                return this._googleMapUrl;
            }
            set
            {
                this._googleMapUrl = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("GoogleMapUrl"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=900)]
        public string LiveMapUrl
        {
            get
            {
                this.OnGetLiveMapUrl();
                return this._liveMapUrl;
            }
            set
            {
                this._liveMapUrl = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LiveMapUrl"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsSerializing
        {
            get
            {
                return this._isSerializing;
            }
            set
            {
                this._isSerializing = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsDeserializing
        {
            get
            {
                return this._isDeserializing;
            }
            set
            {
                this._isDeserializing = value;
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(ContactManager.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            if ((this.Id == -1))
            {
                return base.Equals(address);
            }
            return (this.Id.Equals(address.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this._id;
        }
        
        public override bool Equals(object obj)
        {
            ContactManager.Address address = null;
			address = obj as ContactManager.Address;
            return this.Equals(address);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            ContactManager.Address address = null;
address = value as ContactManager.Address;
            if ((address == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(address);
            return localCompareTo;
        }
        
        public virtual int CompareTo(ContactManager.Address address)
        {
            if ((address == null))
            {
                throw new System.ArgumentNullException("address");
            }
            int localCompareTo = this.Id.CompareTo(address.Id);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = ContactManager.Resources.Manager.GetStringWithDefault(culture, "ContactManager.Address.ExternalValidate", "Type \'ContactManager.Address\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            if ((this.RowVersion == null))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(ContactManager.Constants.ContactManagerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Address", "Delete");
            persistence.AddParameter("@Address_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._id = CodeFluentPersistence.GetReaderValue(reader, "Address_Id", ((int)(-1)));
                this._line1 = CodeFluentPersistence.GetReaderValue(reader, "Address_Line1", ((string)(default(string))));
                this._line2 = CodeFluentPersistence.GetReaderValue(reader, "Address_Line2", ((string)(default(string))));
                this._city = CodeFluentPersistence.GetReaderValue(reader, "Address_City", ((string)(default(string))));
                this._zip = CodeFluentPersistence.GetReaderValue(reader, "Address_Zip", ((string)(default(string))));
                this._country = CodeFluentPersistence.GetReaderValue(reader, "Address_Country", ((string)(default(string))));
                this.ContactId = CodeFluentPersistence.GetReaderValue(reader, "Address_Contact_Id", ((int)(-1)));
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._id = CodeFluentPersistence.GetReaderValue(reader, "Address_Id", ((int)(-1)));
            this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static ContactManager.Address Load(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            ContactManager.Address address = new ContactManager.Address();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(ContactManager.Constants.ContactManagerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Address", "Load");
            persistence.AddParameter("@Id", id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    address.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    address.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return address;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static ContactManager.Address LoadByContact(int contactId)
        {
            if ((contactId == -1))
            {
                return null;
            }
            ContactManager.Address address = new ContactManager.Address();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(ContactManager.Constants.ContactManagerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Address", "LoadByContact");
            persistence.AddParameter("@ContactId", contactId);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    address.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    address.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return address;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Id == -1))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(ContactManager.Constants.ContactManagerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Address", "Load");
            persistence.AddParameter("@Id", this.Id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(ContactManager.Constants.ContactManagerStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Address", "Save");
            persistence.AddParameter("@Address_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@Address_Line1", this.Line1, default(string));
            persistence.AddParameter("@Address_Line2", this.Line2, default(string));
            persistence.AddParameter("@Address_City", this.City, default(string));
            persistence.AddParameter("@Address_Zip", this.Zip, default(string));
            persistence.AddParameter("@Address_Country", this.Country, default(string));
            persistence.AddParameter("@Address_Contact_Id", this.ContactId, ((int)(-1)));
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(ContactManager.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            bool ret = address.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(ContactManager.Address address)
        {
            bool ret = ContactManager.Address.Save(address);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(ContactManager.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            bool ret = address.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("Line1=");
            writer.Write(this.Line1);
            writer.Write(",");
            writer.Write("Line2=");
            writer.Write(this.Line2);
            writer.Write(",");
            writer.Write("City=");
            writer.Write(this.City);
            writer.Write(",");
            writer.Write("Zip=");
            writer.Write(this.Zip);
            writer.Write(",");
            writer.Write("Country=");
            writer.Write(this.Country);
            writer.Write(",");
            writer.Write("Contact=");
            if ((this._contact != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._contact)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_contactId=");
            writer.Write(this._contactId);
            writer.Write(",");
            writer.Write("GoogleMapUrl=");
            writer.Write(this.GoogleMapUrl);
            writer.Write(",");
            writer.Write("LiveMapUrl=");
            writer.Write(this.LiveMapUrl);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static ContactManager.Address LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            ContactManager.Address address;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), -1)));
            address = ContactManager.Address.Load(var);
            return address;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public ContactManager.Address Clone(bool deep)
        {
            ContactManager.Address address = new ContactManager.Address();
            this.CopyTo(address, deep);
            return address;
        }
        
        public ContactManager.Address Clone()
        {
            ContactManager.Address localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(dict["Id"], typeof(int), -1)));
            }
            if ((dict.Contains("Country") == true))
            {
                this.Country = ((string)(ConvertUtilities.ChangeType(dict["Country"], typeof(string), default(string))));
            }
            if ((dict.Contains("Zip") == true))
            {
                this.Zip = ((string)(ConvertUtilities.ChangeType(dict["Zip"], typeof(string), default(string))));
            }
            if ((dict.Contains("Line2") == true))
            {
                this.Line2 = ((string)(ConvertUtilities.ChangeType(dict["Line2"], typeof(string), default(string))));
            }
            if ((dict.Contains("Line1") == true))
            {
                this.Line1 = ((string)(ConvertUtilities.ChangeType(dict["Line1"], typeof(string), default(string))));
            }
            if ((dict.Contains("City") == true))
            {
                this.City = ((string)(ConvertUtilities.ChangeType(dict["City"], typeof(string), default(string))));
            }
            if ((dict.Contains("ContactId") == true))
            {
                this.ContactId = ((int)(ConvertUtilities.ChangeType(dict["ContactId"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(ContactManager.Address address, bool deep)
        {
            if ((address == null))
            {
                throw new System.ArgumentNullException("address");
            }
            address.Id = this.Id;
            address.Country = this.Country;
            address.Zip = this.Zip;
            address.Line2 = this.Line2;
            address.Line1 = this.Line1;
            address.City = this.City;
            address.ContactId = this.ContactId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, address));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["Country"] = this.Country;
            dict["Zip"] = this.Zip;
            dict["Line2"] = this.Line2;
            dict["Line1"] = this.Line1;
            dict["City"] = this.City;
            dict["ContactId"] = this.ContactId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        [System.Runtime.Serialization.OnSerializingAttribute()]
        protected internal void OnEntitySerializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = true;
        }
        
        [System.Runtime.Serialization.OnSerializedAttribute()]
        protected internal void OnEntitySerialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = false;
        }
        
        [System.Runtime.Serialization.OnDeserializedAttribute()]
        protected internal void OnEntityDeserialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = false;
        }
        
        [System.Runtime.Serialization.OnDeserializingAttribute()]
        protected internal void OnEntityDeserializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = true;
            this._raisePropertyChangedEvents = true;
            this._id = -1;
            this._line1 = default(string);
            this._line2 = default(string);
            this._city = default(string);
            this._zip = default(string);
            this._country = default(string);
            this._contactId = -1;
            this._contact = null;
            this._googleMapUrl = default(string);
            this._liveMapUrl = default(string);
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
            this._raisePropertyChangedEvents = true;
        }
    }
}
