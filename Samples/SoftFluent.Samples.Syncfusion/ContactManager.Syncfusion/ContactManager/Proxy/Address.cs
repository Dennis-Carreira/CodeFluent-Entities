//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactManager.Proxy
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Wednesday, 12 February 2014 15:18.
    // Build:1.0.61214.0762
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0762")]
    [System.ComponentModel.DataObjectAttribute()]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, Line1={Line1}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CodeFluent.Runtime.CodeFluentRelationType))]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.mycie.com/contactmanager/contactmanager")]
    public partial class Address : System.ICloneable, System.IComparable, System.IComparable<ContactManager.Proxy.Address>, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, CodeFluent.Runtime.ServiceModel.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, System.IEquatable<ContactManager.Proxy.Address>, CodeFluent.Runtime.Diagnostics.ITraceable, System.ComponentModel.INotifyPropertyChanged
    {
        
        private byte[] _rowVersion;
        
        private int _id = -1;
        
        private string _line1 = default(string);
        
        private string _line2 = default(string);
        
        private string _city = default(string);
        
        private string _zip = default(string);
        
        private string _country = default(string);
        
        [System.NonSerializedAttribute()]
        private MyCie.ContactManager.Contact _contact = default(MyCie.ContactManager.Contact);
        
        private string _googleMapUrl = default(string);
        
        private string _liveMapUrl = default(string);
        
        private bool _raisePropertyChangedEvents = true;
        
        [System.NonSerializedAttribute()]
        private bool _isDeserializing;
        
        [System.NonSerializedAttribute()]
        private bool _isSerializing;
        
#if SILVERLIGHT
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
public CodeFluent.Runtime.CodeFluentEntityState _entityState;
#else
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
private CodeFluent.Runtime.CodeFluentEntityState _entityState;
#endif
#if SILVERLIGHT
protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
{
    if ((this.RaisePropertyChangedEvents == false))
    {
        return;
    }
    if ((this.PropertyChanged != null))
    {
        if ((System.Windows.Deployment.Current.Dispatcher.CheckAccess() == true))
        {
            this.PropertyChanged(this, e);
        }
        else
        {
            System.Windows.Deployment.Current.Dispatcher.BeginInvoke(this.PropertyChanged, this, e);
        }
    }
}
#else
protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
{
    if ((this.RaisePropertyChangedEvents == false))
    {
        return;
    }
    if ((this.PropertyChanged != null))
    {
        this.PropertyChanged(this, e);
    }
}
#endif
        
        public Address()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.Line1;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=100)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=200)]
        public string Line1
        {
            get
            {
                return this._line1;
            }
            set
            {
                this._line1 = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Line1"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=300)]
        public string Line2
        {
            get
            {
                return this._line2;
            }
            set
            {
                this._line2 = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Line2"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=400)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                this._city = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("City"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=500)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                this._zip = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Zip"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=600)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                this._country = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Country"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public MyCie.ContactManager.Contact Contact
        {
            get
            {
                return this._contact;
            }
            set
            {
                this._contact = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Contact"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=800)]
        public string GoogleMapUrl
        {
            get
            {
                return this._googleMapUrl;
            }
            set
            {
                this._googleMapUrl = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("GoogleMapUrl"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=900)]
        public string LiveMapUrl
        {
            get
            {
                return this._liveMapUrl;
            }
            set
            {
                this._liveMapUrl = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LiveMapUrl"));
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        public virtual bool IsDefaultEntityKey
        {
            get
            {
                if ((this.Id.Equals(-1) == true))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        
        bool CodeFluent.Runtime.ServiceModel.ICodeFluentEntity.IsDefaultEntityKey
        {
            get
            {
                return this.IsDefaultEntityKey;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsDeserializing
        {
            get
            {
                return this._isDeserializing;
            }
            set
            {
                this._isDeserializing = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsSerializing
        {
            get
            {
                return this._isSerializing;
            }
            set
            {
                this._isSerializing = value;
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public event System.EventHandler<CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs> EntityAction;
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        void CodeFluent.Runtime.ICodeFluentSummaryValidator.Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateLocal(culture, results);
        }
        
        protected virtual string ValidateLocal(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void ValidateLocal(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = MyCie.ContactManager.Proxy.Resources.Manager.GetStringWithDefault(culture, "ContactManager.Proxy.Address.ExternalValidate", "Type \'ContactManager.Address\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture, CodeFluent.Runtime.ServiceModel.BindingFlags invokeFlags)
        {
            if ((((invokeFlags & CodeFluent.Runtime.ServiceModel.BindingFlags.Local) 
                        == 0) 
                        == false))
            {
                return this.ValidateLocal(culture);
            }
            if ((((invokeFlags & CodeFluent.Runtime.ServiceModel.BindingFlags.Remote) 
                        == 0) 
                        == false))
            {
                return this.ValidateRemote(culture);
            }
            return null;
        }
        
        public string Validate(System.Globalization.CultureInfo culture)
        {
            return this.Validate(culture, CodeFluent.Runtime.ServiceModel.BindingFlags.Local);
        }
        
        protected virtual string ValidateRemote(System.Globalization.CultureInfo culture)
        {
            if ((culture == null))
            {
                throw new System.ArgumentNullException("culture");
            }
            string ret = ContactManager.Proxy.Address.WcfClient.Current.Channel.Validate(this, culture.Name);
            return ret;
        }
        
        public virtual bool Delete()
        {
            bool ret = ContactManager.Proxy.Address.WcfClient.Current.Channel.DeleteByKey(this.Id);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static ContactManager.Proxy.Address Load(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            ContactManager.Proxy.Address ret = ContactManager.Proxy.Address.WcfClient.Current.Channel.Load(id);
            return ret;
        }
        
        public virtual bool SaveByValue()
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged))
            {
                return false;
            }
            this.Validate();
            bool ret = ContactManager.Proxy.Address.WcfClient.Current.Channel.Save(this);
            return ret;
        }
        
        public virtual bool Save()
        {
            this.Validate();
            ContactManager.Proxy.Address address = this;
            if ((ContactManager.Proxy.Address.SaveByRef(ref address) == false))
            {
                return false;
            }
            address.CopyTo(this, true);
            this.RowVersion = address.RowVersion;
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static ContactManager.Proxy.Address LoadByEntityKey(string key)
        {
            if ((key == null))
            {
                throw new System.ArgumentNullException("key");
            }
            if ((key == string.Empty))
            {
                return null;
            }
            ContactManager.Proxy.Address ret = ContactManager.Proxy.Address.WcfClient.Current.Channel.LoadByEntityKey(key);
            return ret;
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            ContactManager.Proxy.Address address = ContactManager.Proxy.Address.LoadByEntityKey(this.EntityKey);
            if ((address == null))
            {
                return false;
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                address.CopyTo(this, true);
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this.RowVersion = address.RowVersion;
            }
            return true;
        }
        
        public ContactManager.Proxy.Address Clone(bool deep)
        {
            ContactManager.Proxy.Address address = new ContactManager.Proxy.Address();
            this.CopyTo(address, deep);
            return address;
        }
        
        public ContactManager.Proxy.Address Clone()
        {
            ContactManager.Proxy.Address localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(dict["Id"], typeof(int), -1)));
            }
            if ((dict.Contains("Contact") == true))
            {
                this.Contact = ((MyCie.ContactManager.Contact)(ConvertUtilities.ChangeType(dict["Contact"], typeof(MyCie.ContactManager.Contact), default(MyCie.ContactManager.Contact))));
            }
            if ((dict.Contains("Country") == true))
            {
                this.Country = ((string)(ConvertUtilities.ChangeType(dict["Country"], typeof(string), default(string))));
            }
            if ((dict.Contains("Line2") == true))
            {
                this.Line2 = ((string)(ConvertUtilities.ChangeType(dict["Line2"], typeof(string), default(string))));
            }
            if ((dict.Contains("Line1") == true))
            {
                this.Line1 = ((string)(ConvertUtilities.ChangeType(dict["Line1"], typeof(string), default(string))));
            }
            if ((dict.Contains("Zip") == true))
            {
                this.Zip = ((string)(ConvertUtilities.ChangeType(dict["Zip"], typeof(string), default(string))));
            }
            if ((dict.Contains("City") == true))
            {
                this.City = ((string)(ConvertUtilities.ChangeType(dict["City"], typeof(string), default(string))));
            }
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(ContactManager.Proxy.Address address, bool deep)
        {
            if ((address == null))
            {
                throw new System.ArgumentNullException("address");
            }
            address.Id = this.Id;
            address.Contact = this.Contact;
            address.Country = this.Country;
            address.Line2 = this.Line2;
            address.Line1 = this.Line1;
            address.Zip = this.Zip;
            address.City = this.City;
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, address));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["Contact"] = this.Contact;
            dict["Country"] = this.Country;
            dict["Line2"] = this.Line2;
            dict["Line1"] = this.Line1;
            dict["Zip"] = this.Zip;
            dict["City"] = this.City;
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        int System.IComparable.CompareTo(object value)
        {
            ContactManager.Proxy.Address address = null;
address = value as ContactManager.Proxy.Address;
            if ((address == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(address);
            return localCompareTo;
        }
        
        public virtual int CompareTo(ContactManager.Proxy.Address address)
        {
            if ((address == null))
            {
                throw new System.ArgumentNullException("address");
            }
            int localCompareTo = this.Id.CompareTo(address.Id);
            return localCompareTo;
        }
        
        public virtual bool Equals(ContactManager.Proxy.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            if ((this.Id == -1))
            {
                return base.Equals(address);
            }
            return (this.Id.Equals(address.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this._id;
        }
        
        public override bool Equals(object obj)
        {
            ContactManager.Proxy.Address address = null;
address = obj as ContactManager.Proxy.Address;
            return this.Equals(address);
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.Diagnostics.ITraceable.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("Line1=");
            writer.Write(this.Line1);
            writer.Write(",");
            writer.Write("Line2=");
            writer.Write(this.Line2);
            writer.Write(",");
            writer.Write("City=");
            writer.Write(this.City);
            writer.Write(",");
            writer.Write("Zip=");
            writer.Write(this.Zip);
            writer.Write(",");
            writer.Write("Country=");
            writer.Write(this.Country);
            writer.Write(",");
            writer.Write("Contact=");
            writer.Write(this.Contact);
            writer.Write(",");
            writer.Write("GoogleMapUrl=");
            writer.Write(this.GoogleMapUrl);
            writer.Write(",");
            writer.Write("LiveMapUrl=");
            writer.Write(this.LiveMapUrl);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(ContactManager.Proxy.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            return address.Save();
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(ContactManager.Proxy.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            return address.Delete();
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(ContactManager.Proxy.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            return address.Save();
        }
        
        [System.Runtime.Serialization.OnDeserializingAttribute()]
        protected internal void OnEntityDeserializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = true;
            this._id = -1;
            this._line1 = default(string);
            this._line2 = default(string);
            this._city = default(string);
            this._zip = default(string);
            this._country = default(string);
            this._contact = default(MyCie.ContactManager.Contact);
            this._googleMapUrl = default(string);
            this._liveMapUrl = default(string);
            this._raisePropertyChangedEvents = true;
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
            this._raisePropertyChangedEvents = true;
        }
        
        [System.Runtime.Serialization.OnDeserializedAttribute()]
        protected internal void OnEntityDeserialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = false;
        }
        
        [System.Runtime.Serialization.OnSerializedAttribute()]
        protected internal void OnEntitySerialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = false;
        }
        
        [System.Runtime.Serialization.OnSerializingAttribute()]
        protected internal void OnEntitySerializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = true;
        }
        
        public static bool SaveByRef(ref ContactManager.Proxy.Address address)
        {
            if ((address == null))
            {
                return false;
            }
            if ((address.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged))
            {
                return false;
            }
            bool ret = ContactManager.Proxy.Address.WcfClient.Current.Channel.SaveByRef(ref address);
            return ret;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0762")]
        public partial class WcfClient : CodeFluent.Runtime.ServiceModel.CodeFluentClient<ContactManager.Proxy.IAddressService>, CodeFluent.Runtime.ServiceModel.ISafeClosable
        {
            
            private static ContactManager.Proxy.Address.WcfClient _current = new ContactManager.Proxy.Address.WcfClient();
            
            public new ContactManager.Proxy.IAddressService Channel
            {
                get
                {
                    return base.Channel;
                }
            }
            
            public static ContactManager.Proxy.Address.WcfClient Current
            {
                get
                {
                    return WcfClient._current;
                }
            }
            
            public virtual void SafeClose()
            {
                CodeFluent.Runtime.ServiceModel.ServiceModelUtilities.SafeClose<ContactManager.Proxy.IAddressService>(this);
            }
            
            void CodeFluent.Runtime.ServiceModel.ISafeClosable.SafeClose()
            {
                this.SafeClose();
            }
            
            public static void Reset()
            {
                if ((WcfClient._current != null))
                {
                    WcfClient._current.SafeClose();
                }
                WcfClient._current = new ContactManager.Proxy.Address.WcfClient();
            }
        }
    }
}
