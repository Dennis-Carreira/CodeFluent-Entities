//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactManager.Proxy
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Thursday, 13 February 2014 19:31.
    // Build:1.0.61214.0762
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0762")]
    [System.ComponentModel.DataObjectAttribute()]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, Email={Email}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CodeFluent.Runtime.CodeFluentRelationType))]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.contactmanager.com")]
    public partial class Contact : System.ICloneable, System.IComparable, System.IComparable<ContactManager.Proxy.Contact>, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, CodeFluent.Runtime.ServiceModel.ICodeFluentCollectionEntity<string>, System.ComponentModel.IDataErrorInfo, System.IEquatable<ContactManager.Proxy.Contact>, CodeFluent.Runtime.Utilities.IKeyable<string>, CodeFluent.Runtime.Diagnostics.ITraceable, System.ComponentModel.INotifyPropertyChanged
    {
        
        private byte[] _rowVersion;
        
        private int _id = -1;
        
        private string _email = default(string);
        
        private string _firstName = default(string);
        
        private string _lastName = default(string);
        
        private int _contactSourceId = -1;
        
        [System.NonSerializedAttribute()]
        private ContactManager.Proxy.ContactSource _contactSource = null;
        
        private ContactManager.Proxy.Status _status = ContactManager.Proxy.Status.Valid;
        
        private int _addressId = -1;
        
        [System.NonSerializedAttribute()]
        private ContactManager.Proxy.Address _address = null;
        
        private int _userId = -1;
        
        [System.NonSerializedAttribute()]
        private ContactManager.Proxy.User _user = null;
        
        private string _description = default(string);
        
        private bool _raisePropertyChangedEvents = true;
        
        [System.NonSerializedAttribute()]
        private bool _isDeserializing;
        
        [System.NonSerializedAttribute()]
        private bool _isSerializing;
        
#if SILVERLIGHT
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
public CodeFluent.Runtime.CodeFluentEntityState _entityState;
#else
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
private CodeFluent.Runtime.CodeFluentEntityState _entityState;
#endif
#if SILVERLIGHT
protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
{
    if ((this.RaisePropertyChangedEvents == false))
    {
        return;
    }
    if ((this.PropertyChanged != null))
    {
        if ((System.Windows.Deployment.Current.Dispatcher.CheckAccess() == true))
        {
            this.PropertyChanged(this, e);
        }
        else
        {
            System.Windows.Deployment.Current.Dispatcher.BeginInvoke(this.PropertyChanged, this, e);
        }
    }
}
#else
protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
{
    if ((this.RaisePropertyChangedEvents == false))
    {
        return;
    }
    if ((this.PropertyChanged != null))
    {
        this.PropertyChanged(this, e);
    }
}
#endif
        
        public Contact()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        string CodeFluent.Runtime.Utilities.IKeyable<System.String>.Key
        {
            get
            {
                return this.Email;
            }
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.Email;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=100)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=200)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<string>.Default.Equals(value, this._email) == true))
                {
                    return;
                }
                string oldKey = this._email;
                this._email = value;
                try
                {
                    this.OnCollectionKeyChanged(oldKey);
                }
                catch (System.ArgumentException )
                {
                    this._email = oldKey;
                    return;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Email"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=300)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                this._firstName = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FirstName"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=400)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                this._lastName = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastName"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(Order=499)]
        public int ContactSourceId
        {
            get
            {
                if (((this._contactSourceId == -1) 
                            && (this._contactSource != null)))
                {
                    this._contactSourceId = this._contactSource.Id;
                }
                return this._contactSourceId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.ContactSourceId) == true))
                {
                    return;
                }
                this._contactSource = null;
                this._contactSourceId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ContactSource"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ContactSourceId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ContactManager.Proxy.ContactSource ContactSource
        {
            get
            {
                if ((this._contactSource == null))
                {
                    this._contactSource = ContactManager.Proxy.ContactSource.Load(this._contactSourceId);
                }
                return this._contactSource;
            }
            set
            {
                this._contactSourceId = -1;
                this._contactSource = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ContactSource"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ContactSourceId"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(ContactManager.Proxy.Status))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=600)]
        public ContactManager.Proxy.Status Status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Status"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(Order=699)]
        public int AddressId
        {
            get
            {
                if (((this._addressId == -1) 
                            && (this._address != null)))
                {
                    this._addressId = this._address.Id;
                }
                return this._addressId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.AddressId) == true))
                {
                    return;
                }
                this._address = null;
                this._addressId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Address"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AddressId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ContactManager.Proxy.Address Address
        {
            get
            {
                if ((this._address == null))
                {
                    this._address = ContactManager.Proxy.Address.Load(this._addressId);
                }
                return this._address;
            }
            set
            {
                if ((value != null))
                {
                    value.ContactId = this.Id;
                }
                this._addressId = -1;
                this._address = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Address"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AddressId"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(Order=799)]
        public int UserId
        {
            get
            {
                if (((this._userId == -1) 
                            && (this._user != null)))
                {
                    this._userId = this._user.Id;
                }
                return this._userId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.UserId) == true))
                {
                    return;
                }
                this._user = null;
                this._userId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("User"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UserId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ContactManager.Proxy.User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = ContactManager.Proxy.User.Load(this._userId);
                }
                return this._user;
            }
            set
            {
                this._userId = -1;
                this._user = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("User"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UserId"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=900)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Description"));
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        public virtual bool IsDefaultEntityKey
        {
            get
            {
                if ((this.Id.Equals(-1) == true))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        
        bool CodeFluent.Runtime.ServiceModel.ICodeFluentEntity.IsDefaultEntityKey
        {
            get
            {
                return this.IsDefaultEntityKey;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsDeserializing
        {
            get
            {
                return this._isDeserializing;
            }
            set
            {
                this._isDeserializing = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsSerializing
        {
            get
            {
                return this._isSerializing;
            }
            set
            {
                this._isSerializing = value;
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public event System.EventHandler<CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs> EntityAction;
        
        public event System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>> KeyChanged;
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        void CodeFluent.Runtime.ICodeFluentSummaryValidator.Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateLocal(culture, results);
        }
        
        protected virtual string ValidateLocal(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void ValidateLocal(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = ContactManager.Proxy.Resources.Manager.GetStringWithDefault(culture, "ContactManager.Proxy.Contact.ExternalValidate", "Type \'ContactManager.Contact\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            if ((this.Email == default(string)))
            {
                string localValidate = ContactManager.Proxy.Resources.Manager.GetStringWithDefault(culture, "ContactManager.Proxy.Contact.Email.NullException", "\'Email\' property cannot be set to \'\' for type \'ContactManager.Contact\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate);
            }
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture, CodeFluent.Runtime.ServiceModel.BindingFlags invokeFlags)
        {
            if ((((invokeFlags & CodeFluent.Runtime.ServiceModel.BindingFlags.Local) 
                        == 0) 
                        == false))
            {
                return this.ValidateLocal(culture);
            }
            if ((((invokeFlags & CodeFluent.Runtime.ServiceModel.BindingFlags.Remote) 
                        == 0) 
                        == false))
            {
                return this.ValidateRemote(culture);
            }
            return null;
        }
        
        public string Validate(System.Globalization.CultureInfo culture)
        {
            return this.Validate(culture, CodeFluent.Runtime.ServiceModel.BindingFlags.Local);
        }
        
        protected virtual string ValidateRemote(System.Globalization.CultureInfo culture)
        {
            if ((culture == null))
            {
                throw new System.ArgumentNullException("culture");
            }
            string ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.Validate(this, culture.Name);
            return ret;
        }
        
        public virtual bool Delete()
        {
            bool ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.DeleteByKey(this.Id);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static ContactManager.Proxy.Contact Load(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            ContactManager.Proxy.Contact ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.Load(id);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static ContactManager.Proxy.Contact LoadByEmail(string email)
        {
            ContactManager.Proxy.Contact ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.LoadByEmail(email);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static ContactManager.Proxy.Contact LoadByAddress(int addressId)
        {
            ContactManager.Proxy.Contact ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.LoadByAddress(addressId);
            return ret;
        }
        
        public virtual bool SaveByValue()
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged))
            {
                return false;
            }
            this.Validate();
            bool ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.Save(this);
            return ret;
        }
        
        public virtual bool Save()
        {
            this.Validate();
            ContactManager.Proxy.Contact contact = this;
            if ((ContactManager.Proxy.Contact.SaveByRef(ref contact) == false))
            {
                return false;
            }
            contact.CopyTo(this, true);
            this.RowVersion = contact.RowVersion;
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static ContactManager.Proxy.Contact LoadByEntityKey(string key)
        {
            if ((key == null))
            {
                throw new System.ArgumentNullException("key");
            }
            if ((key == string.Empty))
            {
                return null;
            }
            ContactManager.Proxy.Contact ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.LoadByEntityKey(key);
            return ret;
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            ContactManager.Proxy.Contact contact = ContactManager.Proxy.Contact.LoadByEntityKey(this.EntityKey);
            if ((contact == null))
            {
                return false;
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                contact.CopyTo(this, true);
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this.RowVersion = contact.RowVersion;
            }
            return true;
        }
        
        public ContactManager.Proxy.Contact Clone(bool deep)
        {
            ContactManager.Proxy.Contact contact = new ContactManager.Proxy.Contact();
            this.CopyTo(contact, deep);
            return contact;
        }
        
        public ContactManager.Proxy.Contact Clone()
        {
            ContactManager.Proxy.Contact localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(dict["Id"], typeof(int), -1)));
            }
            if ((dict.Contains("Email") == true))
            {
                this.Email = ((string)(ConvertUtilities.ChangeType(dict["Email"], typeof(string), default(string))));
            }
            if ((dict.Contains("Description") == true))
            {
                this.Description = ((string)(ConvertUtilities.ChangeType(dict["Description"], typeof(string), default(string))));
            }
            if ((dict.Contains("Status") == true))
            {
                this.Status = ((ContactManager.Proxy.Status)(ConvertUtilities.ChangeType(dict["Status"], typeof(ContactManager.Proxy.Status), ContactManager.Proxy.Status.Valid)));
            }
            if ((dict.Contains("FirstName") == true))
            {
                this.FirstName = ((string)(ConvertUtilities.ChangeType(dict["FirstName"], typeof(string), default(string))));
            }
            if ((dict.Contains("LastName") == true))
            {
                this.LastName = ((string)(ConvertUtilities.ChangeType(dict["LastName"], typeof(string), default(string))));
            }
            if ((dict.Contains("ContactSourceId") == true))
            {
                this.ContactSourceId = ((int)(ConvertUtilities.ChangeType(dict["ContactSourceId"], typeof(int), -1)));
            }
            if ((dict.Contains("UserId") == true))
            {
                this.UserId = ((int)(ConvertUtilities.ChangeType(dict["UserId"], typeof(int), -1)));
            }
            if ((dict.Contains("AddressId") == true))
            {
                this.AddressId = ((int)(ConvertUtilities.ChangeType(dict["AddressId"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(ContactManager.Proxy.Contact contact, bool deep)
        {
            if ((contact == null))
            {
                throw new System.ArgumentNullException("contact");
            }
            contact.Id = this.Id;
            contact.Email = this.Email;
            contact.Description = this.Description;
            contact.Status = this.Status;
            contact.FirstName = this.FirstName;
            contact.LastName = this.LastName;
            contact.ContactSourceId = this.ContactSourceId;
            contact.UserId = this.UserId;
            contact.AddressId = this.AddressId;
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, contact));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["Email"] = this.Email;
            dict["Description"] = this.Description;
            dict["Status"] = this.Status;
            dict["FirstName"] = this.FirstName;
            dict["LastName"] = this.LastName;
            dict["ContactSourceId"] = this.ContactSourceId;
            dict["UserId"] = this.UserId;
            dict["AddressId"] = this.AddressId;
            this.OnEntityAction(new CodeFluent.Runtime.ServiceModel.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        int System.IComparable.CompareTo(object value)
        {
            ContactManager.Proxy.Contact contact = null;
contact = value as ContactManager.Proxy.Contact;
            if ((contact == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(contact);
            return localCompareTo;
        }
        
        public virtual int CompareTo(ContactManager.Proxy.Contact contact)
        {
            if ((contact == null))
            {
                throw new System.ArgumentNullException("contact");
            }
            int localCompareTo = this.Email.CompareTo(contact.Email);
            return localCompareTo;
        }
        
        public virtual bool Equals(ContactManager.Proxy.Contact contact)
        {
            if ((contact == null))
            {
                return false;
            }
            if ((this.Id == -1))
            {
                return base.Equals(contact);
            }
            return (this.Id.Equals(contact.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this._id;
        }
        
        public override bool Equals(object obj)
        {
            ContactManager.Proxy.Contact contact = null;
contact = obj as ContactManager.Proxy.Contact;
            return this.Equals(contact);
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.Diagnostics.ITraceable.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("Email=");
            writer.Write(this.Email);
            writer.Write(",");
            writer.Write("FirstName=");
            writer.Write(this.FirstName);
            writer.Write(",");
            writer.Write("LastName=");
            writer.Write(this.LastName);
            writer.Write(",");
            writer.Write("ContactSource=");
            if ((this._contactSource != null))
            {
                ((CodeFluent.Runtime.Diagnostics.ITraceable)(this._contactSource)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_contactSourceId=");
            writer.Write(this._contactSourceId);
            writer.Write(",");
            writer.Write("Status=");
            writer.Write(this.Status);
            writer.Write(",");
            writer.Write("Address=");
            if ((this._address != null))
            {
                ((CodeFluent.Runtime.Diagnostics.ITraceable)(this._address)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_addressId=");
            writer.Write(this._addressId);
            writer.Write(",");
            writer.Write("User=");
            if ((this._user != null))
            {
                ((CodeFluent.Runtime.Diagnostics.ITraceable)(this._user)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_userId=");
            writer.Write(this._userId);
            writer.Write(",");
            writer.Write("Description=");
            writer.Write(this.Description);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(ContactManager.Proxy.Contact contact)
        {
            if ((contact == null))
            {
                return false;
            }
            return contact.Save();
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(ContactManager.Proxy.Contact contact)
        {
            if ((contact == null))
            {
                return false;
            }
            return contact.Delete();
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(ContactManager.Proxy.Contact contact)
        {
            if ((contact == null))
            {
                return false;
            }
            return contact.Save();
        }
        
        [System.Runtime.Serialization.OnDeserializingAttribute()]
        protected internal void OnEntityDeserializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = true;
            this._id = -1;
            this._email = default(string);
            this._firstName = default(string);
            this._lastName = default(string);
            this._contactSourceId = -1;
            this._contactSource = null;
            this._status = ContactManager.Proxy.Status.Valid;
            this._addressId = -1;
            this._address = null;
            this._userId = -1;
            this._user = null;
            this._description = default(string);
            this._raisePropertyChangedEvents = true;
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
            this._raisePropertyChangedEvents = true;
        }
        
        [System.Runtime.Serialization.OnDeserializedAttribute()]
        protected internal void OnEntityDeserialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = false;
        }
        
        [System.Runtime.Serialization.OnSerializedAttribute()]
        protected internal void OnEntitySerialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = false;
        }
        
        [System.Runtime.Serialization.OnSerializingAttribute()]
        protected internal void OnEntitySerializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = true;
        }
        
        public static bool SaveByRef(ref ContactManager.Proxy.Contact contact)
        {
            if ((contact == null))
            {
                return false;
            }
            if ((contact.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged))
            {
                return false;
            }
            bool ret = ContactManager.Proxy.Contact.WcfClient.Current.Channel.SaveByRef(ref contact);
            return ret;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        protected void OnCollectionKeyChanged(string key)
        {
            if ((this.KeyChanged != null))
            {
                this.KeyChanged(this, new CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>(key));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0762")]
        public partial class WcfClient : CodeFluent.Runtime.ServiceModel.CodeFluentClient<ContactManager.Proxy.IContactService>, CodeFluent.Runtime.ServiceModel.ISafeClosable
        {
            
            private static ContactManager.Proxy.Contact.WcfClient _current = new ContactManager.Proxy.Contact.WcfClient();
            
            public new ContactManager.Proxy.IContactService Channel
            {
                get
                {
                    return base.Channel;
                }
            }
            
            public static ContactManager.Proxy.Contact.WcfClient Current
            {
                get
                {
                    return WcfClient._current;
                }
            }
            
            public virtual void SafeClose()
            {
                CodeFluent.Runtime.ServiceModel.ServiceModelUtilities.SafeClose<ContactManager.Proxy.IContactService>(this);
            }
            
            void CodeFluent.Runtime.ServiceModel.ISafeClosable.SafeClose()
            {
                this.SafeClose();
            }
            
            public static void Reset()
            {
                if ((WcfClient._current != null))
                {
                    WcfClient._current.SafeClose();
                }
                WcfClient._current = new ContactManager.Proxy.Contact.WcfClient();
            }
        }
    }
}
